/*
 * generated by Xtext 2.17.0
 */
package br.ufes.inf.pg.ide.contentassist.antlr;

import br.ufes.inf.pg.ide.contentassist.antlr.internal.InternalStoryGenParser;
import br.ufes.inf.pg.services.StoryGenGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class StoryGenParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(StoryGenGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, StoryGenGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExistentAccess().getAlternatives(), "rule__Existent__Alternatives");
			builder.put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
			builder.put(grammarAccess.getFactAttributeAccess().getAlternatives_3(), "rule__FactAttribute__Alternatives_3");
			builder.put(grammarAccess.getAttributeSettingAccess().getAlternatives_0(), "rule__AttributeSetting__Alternatives_0");
			builder.put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
			builder.put(grammarAccess.getHappeningEventAccess().getAlternatives_0(), "rule__HappeningEvent__Alternatives_0");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getChangeAccess().getAlternatives(), "rule__Change__Alternatives");
			builder.put(grammarAccess.getExistentChangeAccess().getTermAlternatives_5_0(), "rule__ExistentChange__TermAlternatives_5_0");
			builder.put(grammarAccess.getStoryDataChangeAccess().getTermAlternatives_5_0(), "rule__StoryDataChange__TermAlternatives_5_0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getAlternatives_1(), "rule__BinaryExpression__Alternatives_1");
			builder.put(grammarAccess.getUnitExpressionAccess().getAlternatives(), "rule__UnitExpression__Alternatives");
			builder.put(grammarAccess.getUnitaryExpressionAccess().getAlternatives(), "rule__UnitaryExpression__Alternatives");
			builder.put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
			builder.put(grammarAccess.getBooleanTermAccess().getValueAlternatives_0(), "rule__BooleanTerm__ValueAlternatives_0");
			builder.put(grammarAccess.getActionTypeAccess().getAlternatives(), "rule__ActionType__Alternatives");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getAttributionOperatorAccess().getAlternatives(), "rule__AttributionOperator__Alternatives");
			builder.put(grammarAccess.getOrderAccess().getAlternatives(), "rule__Order__Alternatives");
			builder.put(grammarAccess.getAttributeSettingFrequencyAccess().getAlternatives(), "rule__AttributeSettingFrequency__Alternatives");
			builder.put(grammarAccess.getEventPriorityAccess().getAlternatives(), "rule__EventPriority__Alternatives");
			builder.put(grammarAccess.getStoryAccess().getGroup(), "rule__Story__Group__0");
			builder.put(grammarAccess.getStoryDataAccess().getGroup(), "rule__StoryData__Group__0");
			builder.put(grammarAccess.getSpaceAccess().getGroup(), "rule__Space__Group__0");
			builder.put(grammarAccess.getPlotAccess().getGroup(), "rule__Plot__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
			builder.put(grammarAccess.getFactAttributeAccess().getGroup(), "rule__FactAttribute__Group__0");
			builder.put(grammarAccess.getFactAttributeAccess().getGroup_3_1(), "rule__FactAttribute__Group_3_1__0");
			builder.put(grammarAccess.getQuantityAttributeAccess().getGroup(), "rule__QuantityAttribute__Group__0");
			builder.put(grammarAccess.getQuantityAttributeAccess().getGroup_4(), "rule__QuantityAttribute__Group_4__0");
			builder.put(grammarAccess.getAttributeSettingAccess().getGroup(), "rule__AttributeSetting__Group__0");
			builder.put(grammarAccess.getHappeningEventAccess().getGroup(), "rule__HappeningEvent__Group__0");
			builder.put(grammarAccess.getHappeningEventAccess().getGroup_4(), "rule__HappeningEvent__Group_4__0");
			builder.put(grammarAccess.getHappeningEventAccess().getGroup_7(), "rule__HappeningEvent__Group_7__0");
			builder.put(grammarAccess.getHappeningEventAccess().getGroup_8(), "rule__HappeningEvent__Group_8__0");
			builder.put(grammarAccess.getHappeningEventAccess().getGroup_9(), "rule__HappeningEvent__Group_9__0");
			builder.put(grammarAccess.getHappeningEventAccess().getGroup_9_1(), "rule__HappeningEvent__Group_9_1__0");
			builder.put(grammarAccess.getActionEventAccess().getGroup(), "rule__ActionEvent__Group__0");
			builder.put(grammarAccess.getActionEventAccess().getGroup_3(), "rule__ActionEvent__Group_3__0");
			builder.put(grammarAccess.getActionEventAccess().getGroup_8(), "rule__ActionEvent__Group_8__0");
			builder.put(grammarAccess.getActionEventAccess().getGroup_11(), "rule__ActionEvent__Group_11__0");
			builder.put(grammarAccess.getActionEventAccess().getGroup_12(), "rule__ActionEvent__Group_12__0");
			builder.put(grammarAccess.getActionEventAccess().getGroup_12_1(), "rule__ActionEvent__Group_12_1__0");
			builder.put(grammarAccess.getExpressionConditionAccess().getGroup(), "rule__ExpressionCondition__Group__0");
			builder.put(grammarAccess.getOrderConditionAccess().getGroup(), "rule__OrderCondition__Group__0");
			builder.put(grammarAccess.getTriggerConditionAccess().getGroup(), "rule__TriggerCondition__Group__0");
			builder.put(grammarAccess.getExistentChangeAccess().getGroup(), "rule__ExistentChange__Group__0");
			builder.put(grammarAccess.getStoryDataChangeAccess().getGroup(), "rule__StoryDataChange__Group__0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getGroup(), "rule__BinaryExpression__Group__0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getGroup_1_0(), "rule__BinaryExpression__Group_1_0__0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getGroup_1_0_3(), "rule__BinaryExpression__Group_1_0_3__0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getGroup_1_1(), "rule__BinaryExpression__Group_1_1__0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getGroup_1_1_3(), "rule__BinaryExpression__Group_1_1_3__0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getGroup_1_2(), "rule__BinaryExpression__Group_1_2__0");
			builder.put(grammarAccess.getNegationExpressionAccess().getGroup(), "rule__NegationExpression__Group__0");
			builder.put(grammarAccess.getUnitaryExpressionAccess().getGroup_0(), "rule__UnitaryExpression__Group_0__0");
			builder.put(grammarAccess.getExistentAttributeTermAccess().getGroup(), "rule__ExistentAttributeTerm__Group__0");
			builder.put(grammarAccess.getStoryAttributeTermAccess().getGroup(), "rule__StoryAttributeTerm__Group__0");
			builder.put(grammarAccess.getStoryAccess().getDataAssignment_0(), "rule__Story__DataAssignment_0");
			builder.put(grammarAccess.getStoryAccess().getSpaceAssignment_1(), "rule__Story__SpaceAssignment_1");
			builder.put(grammarAccess.getStoryAccess().getPlotAssignment_2(), "rule__Story__PlotAssignment_2");
			builder.put(grammarAccess.getStoryDataAccess().getAttributesAssignment_4(), "rule__StoryData__AttributesAssignment_4");
			builder.put(grammarAccess.getSpaceAccess().getExistentsAssignment_3(), "rule__Space__ExistentsAssignment_3");
			builder.put(grammarAccess.getPlotAccess().getEventsAssignment_3(), "rule__Plot__EventsAssignment_3");
			builder.put(grammarAccess.getActorAccess().getPlayableAssignment_0(), "rule__Actor__PlayableAssignment_0");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_2(), "rule__Actor__NameAssignment_2");
			builder.put(grammarAccess.getActorAccess().getDisplayNameAssignment_5(), "rule__Actor__DisplayNameAssignment_5");
			builder.put(grammarAccess.getActorAccess().getAttributesAssignment_6(), "rule__Actor__AttributesAssignment_6");
			builder.put(grammarAccess.getObjectAccess().getNameAssignment_1(), "rule__Object__NameAssignment_1");
			builder.put(grammarAccess.getObjectAccess().getAttributesAssignment_3(), "rule__Object__AttributesAssignment_3");
			builder.put(grammarAccess.getFactAttributeAccess().getNameAssignment_1(), "rule__FactAttribute__NameAssignment_1");
			builder.put(grammarAccess.getFactAttributeAccess().getInitValueAssignment_3_0(), "rule__FactAttribute__InitValueAssignment_3_0");
			builder.put(grammarAccess.getFactAttributeAccess().getMacroExpAssignment_3_1_1(), "rule__FactAttribute__MacroExpAssignment_3_1_1");
			builder.put(grammarAccess.getQuantityAttributeAccess().getNameAssignment_1(), "rule__QuantityAttribute__NameAssignment_1");
			builder.put(grammarAccess.getQuantityAttributeAccess().getInitValueAssignment_3(), "rule__QuantityAttribute__InitValueAssignment_3");
			builder.put(grammarAccess.getQuantityAttributeAccess().getSettingAssignment_4_1(), "rule__QuantityAttribute__SettingAssignment_4_1");
			builder.put(grammarAccess.getAttributeSettingAccess().getPositiveAssignment_0_0(), "rule__AttributeSetting__PositiveAssignment_0_0");
			builder.put(grammarAccess.getAttributeSettingAccess().getNegativeAssignment_0_1(), "rule__AttributeSetting__NegativeAssignment_0_1");
			builder.put(grammarAccess.getAttributeSettingAccess().getAmountAssignment_2(), "rule__AttributeSetting__AmountAssignment_2");
			builder.put(grammarAccess.getAttributeSettingAccess().getFrequencyAssignment_3(), "rule__AttributeSetting__FrequencyAssignment_3");
			builder.put(grammarAccess.getHappeningEventAccess().getOpeningAssignment_0_0(), "rule__HappeningEvent__OpeningAssignment_0_0");
			builder.put(grammarAccess.getHappeningEventAccess().getEndingAssignment_0_1(), "rule__HappeningEvent__EndingAssignment_0_1");
			builder.put(grammarAccess.getHappeningEventAccess().getNameAssignment_2(), "rule__HappeningEvent__NameAssignment_2");
			builder.put(grammarAccess.getHappeningEventAccess().getPriorityAssignment_4_1(), "rule__HappeningEvent__PriorityAssignment_4_1");
			builder.put(grammarAccess.getHappeningEventAccess().getDescriptionAssignment_6(), "rule__HappeningEvent__DescriptionAssignment_6");
			builder.put(grammarAccess.getHappeningEventAccess().getShortDescriptionAssignment_7_1(), "rule__HappeningEvent__ShortDescriptionAssignment_7_1");
			builder.put(grammarAccess.getHappeningEventAccess().getTriggerAssignment_8_1(), "rule__HappeningEvent__TriggerAssignment_8_1");
			builder.put(grammarAccess.getHappeningEventAccess().getMayTriggersAssignment_9_1_0(), "rule__HappeningEvent__MayTriggersAssignment_9_1_0");
			builder.put(grammarAccess.getHappeningEventAccess().getMayTriggersAssignment_9_2(), "rule__HappeningEvent__MayTriggersAssignment_9_2");
			builder.put(grammarAccess.getHappeningEventAccess().getConditionsAssignment_10(), "rule__HappeningEvent__ConditionsAssignment_10");
			builder.put(grammarAccess.getHappeningEventAccess().getChangesAssignment_11(), "rule__HappeningEvent__ChangesAssignment_11");
			builder.put(grammarAccess.getActionEventAccess().getNameAssignment_1(), "rule__ActionEvent__NameAssignment_1");
			builder.put(grammarAccess.getActionEventAccess().getPriorityAssignment_3_1(), "rule__ActionEvent__PriorityAssignment_3_1");
			builder.put(grammarAccess.getActionEventAccess().getTypeAssignment_5(), "rule__ActionEvent__TypeAssignment_5");
			builder.put(grammarAccess.getActionEventAccess().getDescriptionAssignment_7(), "rule__ActionEvent__DescriptionAssignment_7");
			builder.put(grammarAccess.getActionEventAccess().getShortDescriptionAssignment_8_1(), "rule__ActionEvent__ShortDescriptionAssignment_8_1");
			builder.put(grammarAccess.getActionEventAccess().getActorAssignment_10(), "rule__ActionEvent__ActorAssignment_10");
			builder.put(grammarAccess.getActionEventAccess().getTriggerAssignment_11_1(), "rule__ActionEvent__TriggerAssignment_11_1");
			builder.put(grammarAccess.getActionEventAccess().getMayTriggersAssignment_12_1_0(), "rule__ActionEvent__MayTriggersAssignment_12_1_0");
			builder.put(grammarAccess.getActionEventAccess().getMayTriggersAssignment_12_2(), "rule__ActionEvent__MayTriggersAssignment_12_2");
			builder.put(grammarAccess.getActionEventAccess().getConditionsAssignment_13(), "rule__ActionEvent__ConditionsAssignment_13");
			builder.put(grammarAccess.getActionEventAccess().getChangesAssignment_14(), "rule__ActionEvent__ChangesAssignment_14");
			builder.put(grammarAccess.getExpressionConditionAccess().getExpAssignment_1(), "rule__ExpressionCondition__ExpAssignment_1");
			builder.put(grammarAccess.getOrderConditionAccess().getOrderAssignment_1(), "rule__OrderCondition__OrderAssignment_1");
			builder.put(grammarAccess.getOrderConditionAccess().getEventAssignment_2(), "rule__OrderCondition__EventAssignment_2");
			builder.put(grammarAccess.getTriggerConditionAccess().getTriggerAssignment_1(), "rule__TriggerCondition__TriggerAssignment_1");
			builder.put(grammarAccess.getExistentChangeAccess().getExistentAssignment_1(), "rule__ExistentChange__ExistentAssignment_1");
			builder.put(grammarAccess.getExistentChangeAccess().getAttributeAssignment_3(), "rule__ExistentChange__AttributeAssignment_3");
			builder.put(grammarAccess.getExistentChangeAccess().getOpAssignment_4(), "rule__ExistentChange__OpAssignment_4");
			builder.put(grammarAccess.getExistentChangeAccess().getTermAssignment_5(), "rule__ExistentChange__TermAssignment_5");
			builder.put(grammarAccess.getStoryDataChangeAccess().getAttributeAssignment_3(), "rule__StoryDataChange__AttributeAssignment_3");
			builder.put(grammarAccess.getStoryDataChangeAccess().getOpAssignment_4(), "rule__StoryDataChange__OpAssignment_4");
			builder.put(grammarAccess.getStoryDataChangeAccess().getTermAssignment_5(), "rule__StoryDataChange__TermAssignment_5");
			builder.put(grammarAccess.getBinaryExpressionAccess().getOperandsAssignment_1_0_2(), "rule__BinaryExpression__OperandsAssignment_1_0_2");
			builder.put(grammarAccess.getBinaryExpressionAccess().getOperandsAssignment_1_0_3_1(), "rule__BinaryExpression__OperandsAssignment_1_0_3_1");
			builder.put(grammarAccess.getBinaryExpressionAccess().getOperandsAssignment_1_1_2(), "rule__BinaryExpression__OperandsAssignment_1_1_2");
			builder.put(grammarAccess.getBinaryExpressionAccess().getOperandsAssignment_1_1_3_1(), "rule__BinaryExpression__OperandsAssignment_1_1_3_1");
			builder.put(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_1_2_1(), "rule__BinaryExpression__OperatorAssignment_1_2_1");
			builder.put(grammarAccess.getBinaryExpressionAccess().getRightAssignment_1_2_2(), "rule__BinaryExpression__RightAssignment_1_2_2");
			builder.put(grammarAccess.getNegationExpressionAccess().getOperandAssignment_2(), "rule__NegationExpression__OperandAssignment_2");
			builder.put(grammarAccess.getExistentAttributeTermAccess().getExistentAssignment_0(), "rule__ExistentAttributeTerm__ExistentAssignment_0");
			builder.put(grammarAccess.getExistentAttributeTermAccess().getAttributeAssignment_2(), "rule__ExistentAttributeTerm__AttributeAssignment_2");
			builder.put(grammarAccess.getStoryAttributeTermAccess().getAttributeAssignment_2(), "rule__StoryAttributeTerm__AttributeAssignment_2");
			builder.put(grammarAccess.getIntegerTermAccess().getValueAssignment(), "rule__IntegerTerm__ValueAssignment");
			builder.put(grammarAccess.getBooleanTermAccess().getValueAssignment(), "rule__BooleanTerm__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private StoryGenGrammarAccess grammarAccess;

	@Override
	protected InternalStoryGenParser createParser() {
		InternalStoryGenParser result = new InternalStoryGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StoryGenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StoryGenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
