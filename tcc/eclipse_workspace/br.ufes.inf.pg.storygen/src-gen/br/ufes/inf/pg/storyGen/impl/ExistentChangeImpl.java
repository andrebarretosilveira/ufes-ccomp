/**
 * generated by Xtext 2.17.0
 */
package br.ufes.inf.pg.storyGen.impl;

import br.ufes.inf.pg.storyGen.Existent;
import br.ufes.inf.pg.storyGen.ExistentChange;
import br.ufes.inf.pg.storyGen.StoryGenPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Existent Change</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufes.inf.pg.storyGen.impl.ExistentChangeImpl#getExistent <em>Existent</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExistentChangeImpl extends ChangeImpl implements ExistentChange
{
  /**
   * The cached value of the '{@link #getExistent() <em>Existent</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExistent()
   * @generated
   * @ordered
   */
  protected Existent existent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExistentChangeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StoryGenPackage.Literals.EXISTENT_CHANGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Existent getExistent()
  {
    if (existent != null && existent.eIsProxy())
    {
      InternalEObject oldExistent = (InternalEObject)existent;
      existent = (Existent)eResolveProxy(oldExistent);
      if (existent != oldExistent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StoryGenPackage.EXISTENT_CHANGE__EXISTENT, oldExistent, existent));
      }
    }
    return existent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Existent basicGetExistent()
  {
    return existent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExistent(Existent newExistent)
  {
    Existent oldExistent = existent;
    existent = newExistent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StoryGenPackage.EXISTENT_CHANGE__EXISTENT, oldExistent, existent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StoryGenPackage.EXISTENT_CHANGE__EXISTENT:
        if (resolve) return getExistent();
        return basicGetExistent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StoryGenPackage.EXISTENT_CHANGE__EXISTENT:
        setExistent((Existent)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StoryGenPackage.EXISTENT_CHANGE__EXISTENT:
        setExistent((Existent)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StoryGenPackage.EXISTENT_CHANGE__EXISTENT:
        return existent != null;
    }
    return super.eIsSet(featureID);
  }

} //ExistentChangeImpl
