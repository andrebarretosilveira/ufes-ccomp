/**
 * generated by Xtext 2.17.0
 */
package br.ufes.inf.pg.storyGen.impl;

import br.ufes.inf.pg.storyGen.ActionEvent;
import br.ufes.inf.pg.storyGen.ActionType;
import br.ufes.inf.pg.storyGen.Actor;
import br.ufes.inf.pg.storyGen.AndExpression;
import br.ufes.inf.pg.storyGen.Attribute;
import br.ufes.inf.pg.storyGen.AttributeSetting;
import br.ufes.inf.pg.storyGen.AttributeSettingFrequency;
import br.ufes.inf.pg.storyGen.AttributionOperator;
import br.ufes.inf.pg.storyGen.BooleanTerm;
import br.ufes.inf.pg.storyGen.Change;
import br.ufes.inf.pg.storyGen.ComparisonExpression;
import br.ufes.inf.pg.storyGen.ComparisonOperator;
import br.ufes.inf.pg.storyGen.Condition;
import br.ufes.inf.pg.storyGen.Event;
import br.ufes.inf.pg.storyGen.EventPriority;
import br.ufes.inf.pg.storyGen.Existent;
import br.ufes.inf.pg.storyGen.ExistentAttributeTerm;
import br.ufes.inf.pg.storyGen.ExistentChange;
import br.ufes.inf.pg.storyGen.Expression;
import br.ufes.inf.pg.storyGen.ExpressionCondition;
import br.ufes.inf.pg.storyGen.FactAttribute;
import br.ufes.inf.pg.storyGen.HappeningEvent;
import br.ufes.inf.pg.storyGen.IntegerTerm;
import br.ufes.inf.pg.storyGen.NegationExpression;
import br.ufes.inf.pg.storyGen.OrExpression;
import br.ufes.inf.pg.storyGen.Order;
import br.ufes.inf.pg.storyGen.OrderCondition;
import br.ufes.inf.pg.storyGen.Plot;
import br.ufes.inf.pg.storyGen.QuantityAttribute;
import br.ufes.inf.pg.storyGen.Space;
import br.ufes.inf.pg.storyGen.Story;
import br.ufes.inf.pg.storyGen.StoryAttributeTerm;
import br.ufes.inf.pg.storyGen.StoryData;
import br.ufes.inf.pg.storyGen.StoryDataChange;
import br.ufes.inf.pg.storyGen.StoryGenFactory;
import br.ufes.inf.pg.storyGen.StoryGenPackage;
import br.ufes.inf.pg.storyGen.Term;
import br.ufes.inf.pg.storyGen.TriggerCondition;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StoryGenFactoryImpl extends EFactoryImpl implements StoryGenFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StoryGenFactory init()
  {
    try
    {
      StoryGenFactory theStoryGenFactory = (StoryGenFactory)EPackage.Registry.INSTANCE.getEFactory(StoryGenPackage.eNS_URI);
      if (theStoryGenFactory != null)
      {
        return theStoryGenFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StoryGenFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StoryGenFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StoryGenPackage.STORY: return createStory();
      case StoryGenPackage.STORY_DATA: return createStoryData();
      case StoryGenPackage.SPACE: return createSpace();
      case StoryGenPackage.PLOT: return createPlot();
      case StoryGenPackage.EXISTENT: return createExistent();
      case StoryGenPackage.ACTOR: return createActor();
      case StoryGenPackage.OBJECT: return createObject();
      case StoryGenPackage.ATTRIBUTE: return createAttribute();
      case StoryGenPackage.FACT_ATTRIBUTE: return createFactAttribute();
      case StoryGenPackage.QUANTITY_ATTRIBUTE: return createQuantityAttribute();
      case StoryGenPackage.ATTRIBUTE_SETTING: return createAttributeSetting();
      case StoryGenPackage.EVENT: return createEvent();
      case StoryGenPackage.HAPPENING_EVENT: return createHappeningEvent();
      case StoryGenPackage.ACTION_EVENT: return createActionEvent();
      case StoryGenPackage.CONDITION: return createCondition();
      case StoryGenPackage.EXPRESSION_CONDITION: return createExpressionCondition();
      case StoryGenPackage.ORDER_CONDITION: return createOrderCondition();
      case StoryGenPackage.TRIGGER_CONDITION: return createTriggerCondition();
      case StoryGenPackage.CHANGE: return createChange();
      case StoryGenPackage.EXISTENT_CHANGE: return createExistentChange();
      case StoryGenPackage.STORY_DATA_CHANGE: return createStoryDataChange();
      case StoryGenPackage.EXPRESSION: return createExpression();
      case StoryGenPackage.TERM: return createTerm();
      case StoryGenPackage.EXISTENT_ATTRIBUTE_TERM: return createExistentAttributeTerm();
      case StoryGenPackage.STORY_ATTRIBUTE_TERM: return createStoryAttributeTerm();
      case StoryGenPackage.INTEGER_TERM: return createIntegerTerm();
      case StoryGenPackage.BOOLEAN_TERM: return createBooleanTerm();
      case StoryGenPackage.OR_EXPRESSION: return createOrExpression();
      case StoryGenPackage.AND_EXPRESSION: return createAndExpression();
      case StoryGenPackage.COMPARISON_EXPRESSION: return createComparisonExpression();
      case StoryGenPackage.NEGATION_EXPRESSION: return createNegationExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case StoryGenPackage.ACTION_TYPE:
        return createActionTypeFromString(eDataType, initialValue);
      case StoryGenPackage.COMPARISON_OPERATOR:
        return createComparisonOperatorFromString(eDataType, initialValue);
      case StoryGenPackage.ATTRIBUTION_OPERATOR:
        return createAttributionOperatorFromString(eDataType, initialValue);
      case StoryGenPackage.ORDER:
        return createOrderFromString(eDataType, initialValue);
      case StoryGenPackage.ATTRIBUTE_SETTING_FREQUENCY:
        return createAttributeSettingFrequencyFromString(eDataType, initialValue);
      case StoryGenPackage.EVENT_PRIORITY:
        return createEventPriorityFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case StoryGenPackage.ACTION_TYPE:
        return convertActionTypeToString(eDataType, instanceValue);
      case StoryGenPackage.COMPARISON_OPERATOR:
        return convertComparisonOperatorToString(eDataType, instanceValue);
      case StoryGenPackage.ATTRIBUTION_OPERATOR:
        return convertAttributionOperatorToString(eDataType, instanceValue);
      case StoryGenPackage.ORDER:
        return convertOrderToString(eDataType, instanceValue);
      case StoryGenPackage.ATTRIBUTE_SETTING_FREQUENCY:
        return convertAttributeSettingFrequencyToString(eDataType, instanceValue);
      case StoryGenPackage.EVENT_PRIORITY:
        return convertEventPriorityToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Story createStory()
  {
    StoryImpl story = new StoryImpl();
    return story;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoryData createStoryData()
  {
    StoryDataImpl storyData = new StoryDataImpl();
    return storyData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Space createSpace()
  {
    SpaceImpl space = new SpaceImpl();
    return space;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plot createPlot()
  {
    PlotImpl plot = new PlotImpl();
    return plot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Existent createExistent()
  {
    ExistentImpl existent = new ExistentImpl();
    return existent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public br.ufes.inf.pg.storyGen.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FactAttribute createFactAttribute()
  {
    FactAttributeImpl factAttribute = new FactAttributeImpl();
    return factAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QuantityAttribute createQuantityAttribute()
  {
    QuantityAttributeImpl quantityAttribute = new QuantityAttributeImpl();
    return quantityAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeSetting createAttributeSetting()
  {
    AttributeSettingImpl attributeSetting = new AttributeSettingImpl();
    return attributeSetting;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HappeningEvent createHappeningEvent()
  {
    HappeningEventImpl happeningEvent = new HappeningEventImpl();
    return happeningEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionEvent createActionEvent()
  {
    ActionEventImpl actionEvent = new ActionEventImpl();
    return actionEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionCondition createExpressionCondition()
  {
    ExpressionConditionImpl expressionCondition = new ExpressionConditionImpl();
    return expressionCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderCondition createOrderCondition()
  {
    OrderConditionImpl orderCondition = new OrderConditionImpl();
    return orderCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TriggerCondition createTriggerCondition()
  {
    TriggerConditionImpl triggerCondition = new TriggerConditionImpl();
    return triggerCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Change createChange()
  {
    ChangeImpl change = new ChangeImpl();
    return change;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistentChange createExistentChange()
  {
    ExistentChangeImpl existentChange = new ExistentChangeImpl();
    return existentChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoryDataChange createStoryDataChange()
  {
    StoryDataChangeImpl storyDataChange = new StoryDataChangeImpl();
    return storyDataChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistentAttributeTerm createExistentAttributeTerm()
  {
    ExistentAttributeTermImpl existentAttributeTerm = new ExistentAttributeTermImpl();
    return existentAttributeTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoryAttributeTerm createStoryAttributeTerm()
  {
    StoryAttributeTermImpl storyAttributeTerm = new StoryAttributeTermImpl();
    return storyAttributeTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerTerm createIntegerTerm()
  {
    IntegerTermImpl integerTerm = new IntegerTermImpl();
    return integerTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanTerm createBooleanTerm()
  {
    BooleanTermImpl booleanTerm = new BooleanTermImpl();
    return booleanTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression createComparisonExpression()
  {
    ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
    return comparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NegationExpression createNegationExpression()
  {
    NegationExpressionImpl negationExpression = new NegationExpressionImpl();
    return negationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionType createActionTypeFromString(EDataType eDataType, String initialValue)
  {
    ActionType result = ActionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertActionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparisonOperator createComparisonOperatorFromString(EDataType eDataType, String initialValue)
  {
    ComparisonOperator result = ComparisonOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparisonOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributionOperator createAttributionOperatorFromString(EDataType eDataType, String initialValue)
  {
    AttributionOperator result = AttributionOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAttributionOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Order createOrderFromString(EDataType eDataType, String initialValue)
  {
    Order result = Order.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOrderToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeSettingFrequency createAttributeSettingFrequencyFromString(EDataType eDataType, String initialValue)
  {
    AttributeSettingFrequency result = AttributeSettingFrequency.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAttributeSettingFrequencyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventPriority createEventPriorityFromString(EDataType eDataType, String initialValue)
  {
    EventPriority result = EventPriority.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventPriorityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoryGenPackage getStoryGenPackage()
  {
    return (StoryGenPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StoryGenPackage getPackage()
  {
    return StoryGenPackage.eINSTANCE;
  }

} //StoryGenFactoryImpl
