/*
 * generated by Xtext 2.17.0
 */
package br.ufes.inf.pg.serializer;

import br.ufes.inf.pg.services.StoryGenGrammarAccess;
import br.ufes.inf.pg.storyGen.ActionEvent;
import br.ufes.inf.pg.storyGen.Actor;
import br.ufes.inf.pg.storyGen.AndExpression;
import br.ufes.inf.pg.storyGen.AttributeSetting;
import br.ufes.inf.pg.storyGen.BooleanTerm;
import br.ufes.inf.pg.storyGen.ComparisonExpression;
import br.ufes.inf.pg.storyGen.ExistentAttributeTerm;
import br.ufes.inf.pg.storyGen.ExistentChange;
import br.ufes.inf.pg.storyGen.ExpressionCondition;
import br.ufes.inf.pg.storyGen.FactAttribute;
import br.ufes.inf.pg.storyGen.HappeningEvent;
import br.ufes.inf.pg.storyGen.IntegerTerm;
import br.ufes.inf.pg.storyGen.NegationExpression;
import br.ufes.inf.pg.storyGen.OrExpression;
import br.ufes.inf.pg.storyGen.OrderCondition;
import br.ufes.inf.pg.storyGen.Plot;
import br.ufes.inf.pg.storyGen.QuantityAttribute;
import br.ufes.inf.pg.storyGen.Space;
import br.ufes.inf.pg.storyGen.Story;
import br.ufes.inf.pg.storyGen.StoryAttributeTerm;
import br.ufes.inf.pg.storyGen.StoryData;
import br.ufes.inf.pg.storyGen.StoryDataChange;
import br.ufes.inf.pg.storyGen.StoryGenPackage;
import br.ufes.inf.pg.storyGen.TriggerCondition;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class StoryGenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StoryGenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StoryGenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StoryGenPackage.ACTION_EVENT:
				sequence_ActionEvent(context, (ActionEvent) semanticObject); 
				return; 
			case StoryGenPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case StoryGenPackage.AND_EXPRESSION:
				sequence_BinaryExpression(context, (AndExpression) semanticObject); 
				return; 
			case StoryGenPackage.ATTRIBUTE_SETTING:
				sequence_AttributeSetting(context, (AttributeSetting) semanticObject); 
				return; 
			case StoryGenPackage.BOOLEAN_TERM:
				sequence_BooleanTerm(context, (BooleanTerm) semanticObject); 
				return; 
			case StoryGenPackage.COMPARISON_EXPRESSION:
				sequence_BinaryExpression(context, (ComparisonExpression) semanticObject); 
				return; 
			case StoryGenPackage.EXISTENT_ATTRIBUTE_TERM:
				sequence_ExistentAttributeTerm(context, (ExistentAttributeTerm) semanticObject); 
				return; 
			case StoryGenPackage.EXISTENT_CHANGE:
				sequence_ExistentChange(context, (ExistentChange) semanticObject); 
				return; 
			case StoryGenPackage.EXPRESSION_CONDITION:
				sequence_ExpressionCondition(context, (ExpressionCondition) semanticObject); 
				return; 
			case StoryGenPackage.FACT_ATTRIBUTE:
				sequence_FactAttribute(context, (FactAttribute) semanticObject); 
				return; 
			case StoryGenPackage.HAPPENING_EVENT:
				sequence_HappeningEvent(context, (HappeningEvent) semanticObject); 
				return; 
			case StoryGenPackage.INTEGER_TERM:
				sequence_IntegerTerm(context, (IntegerTerm) semanticObject); 
				return; 
			case StoryGenPackage.NEGATION_EXPRESSION:
				sequence_NegationExpression(context, (NegationExpression) semanticObject); 
				return; 
			case StoryGenPackage.OBJECT:
				sequence_Object(context, (br.ufes.inf.pg.storyGen.Object) semanticObject); 
				return; 
			case StoryGenPackage.OR_EXPRESSION:
				sequence_BinaryExpression(context, (OrExpression) semanticObject); 
				return; 
			case StoryGenPackage.ORDER_CONDITION:
				sequence_OrderCondition(context, (OrderCondition) semanticObject); 
				return; 
			case StoryGenPackage.PLOT:
				sequence_Plot(context, (Plot) semanticObject); 
				return; 
			case StoryGenPackage.QUANTITY_ATTRIBUTE:
				sequence_QuantityAttribute(context, (QuantityAttribute) semanticObject); 
				return; 
			case StoryGenPackage.SPACE:
				sequence_Space(context, (Space) semanticObject); 
				return; 
			case StoryGenPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case StoryGenPackage.STORY_ATTRIBUTE_TERM:
				sequence_StoryAttributeTerm(context, (StoryAttributeTerm) semanticObject); 
				return; 
			case StoryGenPackage.STORY_DATA:
				sequence_StoryData(context, (StoryData) semanticObject); 
				return; 
			case StoryGenPackage.STORY_DATA_CHANGE:
				sequence_StoryDataChange(context, (StoryDataChange) semanticObject); 
				return; 
			case StoryGenPackage.TRIGGER_CONDITION:
				sequence_TriggerCondition(context, (TriggerCondition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Event returns ActionEvent
	 *     ActionEvent returns ActionEvent
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         priority=EventPriority? 
	 *         type=ActionType 
	 *         description=STRING 
	 *         shortDescription=STRING? 
	 *         actor=[Actor|ID] 
	 *         trigger=[Event|ID]? 
	 *         (mayTriggers+=[Event|ID]* mayTriggers+=[Event|ID])? 
	 *         conditions+=Condition* 
	 *         changes+=Change*
	 *     )
	 */
	protected void sequence_ActionEvent(ISerializationContext context, ActionEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Existent returns Actor
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (playable?='player'? name=ID displayName=STRING attributes+=Attribute*)
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeSetting returns AttributeSetting
	 *
	 * Constraint:
	 *     ((positive?='increments' | negative?='decrements') amount=INT frequency=AttributeSettingFrequency)
	 */
	protected void sequence_AttributeSetting(ISerializationContext context, AttributeSetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns AndExpression
	 *     BinaryExpression returns AndExpression
	 *     BinaryExpression.OrExpression_1_0_0 returns AndExpression
	 *     BinaryExpression.AndExpression_1_1_0 returns AndExpression
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns AndExpression
	 *     UnitExpression returns AndExpression
	 *     UnitaryExpression returns AndExpression
	 *
	 * Constraint:
	 *     (operands+=BinaryExpression_AndExpression_1_1_0 operands+=UnitExpression operands+=UnitExpression*)
	 */
	protected void sequence_BinaryExpression(ISerializationContext context, AndExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ComparisonExpression
	 *     BinaryExpression returns ComparisonExpression
	 *     BinaryExpression.OrExpression_1_0_0 returns ComparisonExpression
	 *     BinaryExpression.AndExpression_1_1_0 returns ComparisonExpression
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns ComparisonExpression
	 *     UnitExpression returns ComparisonExpression
	 *     UnitaryExpression returns ComparisonExpression
	 *
	 * Constraint:
	 *     (left=BinaryExpression_ComparisonExpression_1_2_0 operator=ComparisonOperator right=UnitExpression)
	 */
	protected void sequence_BinaryExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.COMPARISON_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.COMPARISON_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.COMPARISON_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.COMPARISON_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.COMPARISON_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.COMPARISON_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryExpressionAccess().getComparisonExpressionLeftAction_1_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBinaryExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_2_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBinaryExpressionAccess().getRightUnitExpressionParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OrExpression
	 *     BinaryExpression returns OrExpression
	 *     BinaryExpression.OrExpression_1_0_0 returns OrExpression
	 *     BinaryExpression.AndExpression_1_1_0 returns OrExpression
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns OrExpression
	 *     UnitExpression returns OrExpression
	 *     UnitaryExpression returns OrExpression
	 *
	 * Constraint:
	 *     (operands+=BinaryExpression_OrExpression_1_0_0 operands+=UnitExpression operands+=UnitExpression*)
	 */
	protected void sequence_BinaryExpression(ISerializationContext context, OrExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanTerm
	 *     BinaryExpression returns BooleanTerm
	 *     BinaryExpression.OrExpression_1_0_0 returns BooleanTerm
	 *     BinaryExpression.AndExpression_1_1_0 returns BooleanTerm
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns BooleanTerm
	 *     UnitExpression returns BooleanTerm
	 *     UnitaryExpression returns BooleanTerm
	 *     Term returns BooleanTerm
	 *     BooleanTerm returns BooleanTerm
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_BooleanTerm(ISerializationContext context, BooleanTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ExistentAttributeTerm
	 *     BinaryExpression returns ExistentAttributeTerm
	 *     BinaryExpression.OrExpression_1_0_0 returns ExistentAttributeTerm
	 *     BinaryExpression.AndExpression_1_1_0 returns ExistentAttributeTerm
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns ExistentAttributeTerm
	 *     UnitExpression returns ExistentAttributeTerm
	 *     UnitaryExpression returns ExistentAttributeTerm
	 *     Term returns ExistentAttributeTerm
	 *     ExistentAttributeTerm returns ExistentAttributeTerm
	 *
	 * Constraint:
	 *     (existent=[Existent|ID] attribute=[Attribute|ID])
	 */
	protected void sequence_ExistentAttributeTerm(ISerializationContext context, ExistentAttributeTerm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.EXISTENT_ATTRIBUTE_TERM__EXISTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.EXISTENT_ATTRIBUTE_TERM__EXISTENT));
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.EXISTENT_ATTRIBUTE_TERM__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.EXISTENT_ATTRIBUTE_TERM__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistentAttributeTermAccess().getExistentExistentIDTerminalRuleCall_0_0_1(), semanticObject.eGet(StoryGenPackage.Literals.EXISTENT_ATTRIBUTE_TERM__EXISTENT, false));
		feeder.accept(grammarAccess.getExistentAttributeTermAccess().getAttributeAttributeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(StoryGenPackage.Literals.EXISTENT_ATTRIBUTE_TERM__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Change returns ExistentChange
	 *     ExistentChange returns ExistentChange
	 *
	 * Constraint:
	 *     (existent=[Existent|ID] attribute=[Attribute|ID] op=AttributionOperator (term=IntegerTerm | term=BooleanTerm))
	 */
	protected void sequence_ExistentChange(ISerializationContext context, ExistentChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns ExpressionCondition
	 *     ExpressionCondition returns ExpressionCondition
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_ExpressionCondition(ISerializationContext context, ExpressionCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.EXPRESSION_CONDITION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.EXPRESSION_CONDITION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionConditionAccess().getExpExpressionParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns FactAttribute
	 *     FactAttribute returns FactAttribute
	 *
	 * Constraint:
	 *     (name=ID (initValue=BooleanTerm | macroExp=Expression))
	 */
	protected void sequence_FactAttribute(ISerializationContext context, FactAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns HappeningEvent
	 *     HappeningEvent returns HappeningEvent
	 *
	 * Constraint:
	 *     (
	 *         (opening?='opening' | ending?='ending')? 
	 *         name=ID 
	 *         priority=EventPriority? 
	 *         description=STRING 
	 *         shortDescription=STRING? 
	 *         trigger=[Event|ID]? 
	 *         (mayTriggers+=[Event|ID]* mayTriggers+=[Event|ID])? 
	 *         conditions+=Condition* 
	 *         changes+=Change*
	 *     )
	 */
	protected void sequence_HappeningEvent(ISerializationContext context, HappeningEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntegerTerm
	 *     BinaryExpression returns IntegerTerm
	 *     BinaryExpression.OrExpression_1_0_0 returns IntegerTerm
	 *     BinaryExpression.AndExpression_1_1_0 returns IntegerTerm
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns IntegerTerm
	 *     UnitExpression returns IntegerTerm
	 *     UnitaryExpression returns IntegerTerm
	 *     Term returns IntegerTerm
	 *     IntegerTerm returns IntegerTerm
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntegerTerm(ISerializationContext context, IntegerTerm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.INTEGER_TERM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.INTEGER_TERM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerTermAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NegationExpression
	 *     BinaryExpression returns NegationExpression
	 *     BinaryExpression.OrExpression_1_0_0 returns NegationExpression
	 *     BinaryExpression.AndExpression_1_1_0 returns NegationExpression
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns NegationExpression
	 *     UnitExpression returns NegationExpression
	 *     NegationExpression returns NegationExpression
	 *     UnitaryExpression returns NegationExpression
	 *
	 * Constraint:
	 *     operand=UnitExpression
	 */
	protected void sequence_NegationExpression(ISerializationContext context, NegationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.NEGATION_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.NEGATION_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNegationExpressionAccess().getOperandUnitExpressionParserRuleCall_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Existent returns Object
	 *     Object returns Object
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute*)
	 */
	protected void sequence_Object(ISerializationContext context, br.ufes.inf.pg.storyGen.Object semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns OrderCondition
	 *     OrderCondition returns OrderCondition
	 *
	 * Constraint:
	 *     (order=Order event=[Event|ID])
	 */
	protected void sequence_OrderCondition(ISerializationContext context, OrderCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.ORDER_CONDITION__ORDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.ORDER_CONDITION__ORDER));
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.ORDER_CONDITION__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.ORDER_CONDITION__EVENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrderConditionAccess().getOrderOrderEnumRuleCall_1_0(), semanticObject.getOrder());
		feeder.accept(grammarAccess.getOrderConditionAccess().getEventEventIDTerminalRuleCall_2_0_1(), semanticObject.eGet(StoryGenPackage.Literals.ORDER_CONDITION__EVENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Plot returns Plot
	 *
	 * Constraint:
	 *     events+=Event*
	 */
	protected void sequence_Plot(ISerializationContext context, Plot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns QuantityAttribute
	 *     QuantityAttribute returns QuantityAttribute
	 *
	 * Constraint:
	 *     (name=ID initValue=IntegerTerm setting=AttributeSetting?)
	 */
	protected void sequence_QuantityAttribute(ISerializationContext context, QuantityAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Space returns Space
	 *
	 * Constraint:
	 *     existents+=Existent*
	 */
	protected void sequence_Space(ISerializationContext context, Space semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns StoryAttributeTerm
	 *     BinaryExpression returns StoryAttributeTerm
	 *     BinaryExpression.OrExpression_1_0_0 returns StoryAttributeTerm
	 *     BinaryExpression.AndExpression_1_1_0 returns StoryAttributeTerm
	 *     BinaryExpression.ComparisonExpression_1_2_0 returns StoryAttributeTerm
	 *     UnitExpression returns StoryAttributeTerm
	 *     UnitaryExpression returns StoryAttributeTerm
	 *     Term returns StoryAttributeTerm
	 *     StoryAttributeTerm returns StoryAttributeTerm
	 *
	 * Constraint:
	 *     attribute=[Attribute|ID]
	 */
	protected void sequence_StoryAttributeTerm(ISerializationContext context, StoryAttributeTerm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.STORY_ATTRIBUTE_TERM__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.STORY_ATTRIBUTE_TERM__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStoryAttributeTermAccess().getAttributeAttributeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(StoryGenPackage.Literals.STORY_ATTRIBUTE_TERM__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Change returns StoryDataChange
	 *     StoryDataChange returns StoryDataChange
	 *
	 * Constraint:
	 *     (attribute=[Attribute|ID] op=AttributionOperator (term=IntegerTerm | term=BooleanTerm))
	 */
	protected void sequence_StoryDataChange(ISerializationContext context, StoryDataChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StoryData returns StoryData
	 *
	 * Constraint:
	 *     attributes+=Attribute*
	 */
	protected void sequence_StoryData(ISerializationContext context, StoryData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (data=StoryData space=Space plot=Plot)
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.STORY__DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.STORY__DATA));
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.STORY__SPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.STORY__SPACE));
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.STORY__PLOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.STORY__PLOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStoryAccess().getDataStoryDataParserRuleCall_0_0(), semanticObject.getData());
		feeder.accept(grammarAccess.getStoryAccess().getSpaceSpaceParserRuleCall_1_0(), semanticObject.getSpace());
		feeder.accept(grammarAccess.getStoryAccess().getPlotPlotParserRuleCall_2_0(), semanticObject.getPlot());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns TriggerCondition
	 *     TriggerCondition returns TriggerCondition
	 *
	 * Constraint:
	 *     trigger?='be-triggered'
	 */
	protected void sequence_TriggerCondition(ISerializationContext context, TriggerCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGenPackage.Literals.TRIGGER_CONDITION__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGenPackage.Literals.TRIGGER_CONDITION__TRIGGER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTriggerConditionAccess().getTriggerBeTriggeredKeyword_1_0(), semanticObject.isTrigger());
		feeder.finish();
	}
	
	
}
