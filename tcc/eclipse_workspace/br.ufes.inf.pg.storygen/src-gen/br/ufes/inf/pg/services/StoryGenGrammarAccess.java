/*
 * generated by Xtext 2.17.0
 */
package br.ufes.inf.pg.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StoryGenGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataStoryDataParserRuleCall_0_0 = (RuleCall)cDataAssignment_0.eContents().get(0);
		private final Assignment cSpaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpaceSpaceParserRuleCall_1_0 = (RuleCall)cSpaceAssignment_1.eContents().get(0);
		private final Assignment cPlotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlotPlotParserRuleCall_2_0 = (RuleCall)cPlotAssignment_2.eContents().get(0);
		
		///*
		// * Story
		// */ Story:
		//	data=StoryData
		//	space=Space
		//	plot=Plot;
		@Override public ParserRule getRule() { return rule; }
		
		//data=StoryData space=Space plot=Plot
		public Group getGroup() { return cGroup; }
		
		//data=StoryData
		public Assignment getDataAssignment_0() { return cDataAssignment_0; }
		
		//StoryData
		public RuleCall getDataStoryDataParserRuleCall_0_0() { return cDataStoryDataParserRuleCall_0_0; }
		
		//space=Space
		public Assignment getSpaceAssignment_1() { return cSpaceAssignment_1; }
		
		//Space
		public RuleCall getSpaceSpaceParserRuleCall_1_0() { return cSpaceSpaceParserRuleCall_1_0; }
		
		//plot=Plot
		public Assignment getPlotAssignment_2() { return cPlotAssignment_2; }
		
		//Plot
		public RuleCall getPlotPlotParserRuleCall_2_0() { return cPlotPlotParserRuleCall_2_0; }
	}
	public class StoryDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.StoryData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStoryDataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StoryData:
		//	{StoryData} 'Story' 'data' '{'
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StoryData} 'Story' 'data' '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//{StoryData}
		public Action getStoryDataAction_0() { return cStoryDataAction_0; }
		
		//'Story'
		public Keyword getStoryKeyword_1() { return cStoryKeyword_1; }
		
		//'data'
		public Keyword getDataKeyword_2() { return cDataKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Space");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExistentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExistentsExistentParserRuleCall_3_0 = (RuleCall)cExistentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Space:
		//	{Space} 'Space' '{'
		//	existents+=Existent*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Space} 'Space' '{' existents+=Existent* '}'
		public Group getGroup() { return cGroup; }
		
		//{Space}
		public Action getSpaceAction_0() { return cSpaceAction_0; }
		
		//'Space'
		public Keyword getSpaceKeyword_1() { return cSpaceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//existents+=Existent*
		public Assignment getExistentsAssignment_3() { return cExistentsAssignment_3; }
		
		//Existent
		public RuleCall getExistentsExistentParserRuleCall_3_0() { return cExistentsExistentParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Plot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Plot:
		//	{Plot} 'Plot' '{'
		//	events+=Event*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Plot} 'Plot' '{' events+=Event* '}'
		public Group getGroup() { return cGroup; }
		
		//{Plot}
		public Action getPlotAction_0() { return cPlotAction_0; }
		
		//'Plot'
		public Keyword getPlotKeyword_1() { return cPlotKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//events+=Event*
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_0() { return cEventsEventParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExistentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Existent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Existents
		// */ Existent:
		//	Actor | Object;
		@Override public ParserRule getRule() { return rule; }
		
		//Actor | Object
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }
		
		//Object
		public RuleCall getObjectParserRuleCall_1() { return cObjectParserRuleCall_1; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlayableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPlayablePlayerKeyword_0_0 = (Keyword)cPlayableAssignment_0.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDisplayNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cDisplayNameAssignment_5.eContents().get(0);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesAttributeParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Actor:
		//	playable?='player'? 'actor' name=ID
		//	'{' 'name:' displayName=STRING attributes+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//playable?='player'? 'actor' name=ID '{' 'name:' displayName=STRING attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//playable?='player'?
		public Assignment getPlayableAssignment_0() { return cPlayableAssignment_0; }
		
		//'player'
		public Keyword getPlayablePlayerKeyword_0_0() { return cPlayablePlayerKeyword_0_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'name:'
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }
		
		//displayName=STRING
		public Assignment getDisplayNameAssignment_5() { return cDisplayNameAssignment_5; }
		
		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_5_0() { return cDisplayNameSTRINGTerminalRuleCall_5_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_0() { return cAttributesAttributeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Object:
		//	'object' name=ID
		//	'{' attributes+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'object' name=ID '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFactAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuantityAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Attributes
		// */ Attribute:
		//	FactAttribute | QuantityAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//FactAttribute | QuantityAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FactAttribute
		public RuleCall getFactAttributeParserRuleCall_0() { return cFactAttributeParserRuleCall_0; }
		
		//QuantityAttribute
		public RuleCall getQuantityAttributeParserRuleCall_1() { return cQuantityAttributeParserRuleCall_1; }
	}
	public class FactAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.FactAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cInitValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cInitValueBooleanTermParserRuleCall_3_0_0 = (RuleCall)cInitValueAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cMacroExpAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cMacroExpExpressionParserRuleCall_3_1_1_0 = (RuleCall)cMacroExpAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//FactAttribute:
		//	'fact' name=ID '=' (initValue=BooleanTerm | '(' macroExp=Expression ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'fact' name=ID '=' (initValue=BooleanTerm | '(' macroExp=Expression ')')
		public Group getGroup() { return cGroup; }
		
		//'fact'
		public Keyword getFactKeyword_0() { return cFactKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initValue=BooleanTerm | '(' macroExp=Expression ')'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//initValue=BooleanTerm
		public Assignment getInitValueAssignment_3_0() { return cInitValueAssignment_3_0; }
		
		//BooleanTerm
		public RuleCall getInitValueBooleanTermParserRuleCall_3_0_0() { return cInitValueBooleanTermParserRuleCall_3_0_0; }
		
		//'(' macroExp=Expression ')'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }
		
		//macroExp=Expression
		public Assignment getMacroExpAssignment_3_1_1() { return cMacroExpAssignment_3_1_1; }
		
		//Expression
		public RuleCall getMacroExpExpressionParserRuleCall_3_1_1_0() { return cMacroExpExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }
	}
	public class QuantityAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.QuantityAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuantityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitValueIntegerTermParserRuleCall_3_0 = (RuleCall)cInitValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSettingAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSettingAttributeSettingParserRuleCall_4_1_0 = (RuleCall)cSettingAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//QuantityAttribute:
		//	'quantity' name=ID '=' initValue=IntegerTerm ('[' setting=AttributeSetting ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'quantity' name=ID '=' initValue=IntegerTerm ('[' setting=AttributeSetting ']')?
		public Group getGroup() { return cGroup; }
		
		//'quantity'
		public Keyword getQuantityKeyword_0() { return cQuantityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//initValue=IntegerTerm
		public Assignment getInitValueAssignment_3() { return cInitValueAssignment_3; }
		
		//IntegerTerm
		public RuleCall getInitValueIntegerTermParserRuleCall_3_0() { return cInitValueIntegerTermParserRuleCall_3_0; }
		
		//('[' setting=AttributeSetting ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//setting=AttributeSetting
		public Assignment getSettingAssignment_4_1() { return cSettingAssignment_4_1; }
		
		//AttributeSetting
		public RuleCall getSettingAttributeSettingParserRuleCall_4_1_0() { return cSettingAttributeSettingParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class AttributeSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.AttributeSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPositiveAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPositiveIncrementsKeyword_0_0_0 = (Keyword)cPositiveAssignment_0_0.eContents().get(0);
		private final Assignment cNegativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNegativeDecrementsKeyword_0_1_0 = (Keyword)cNegativeAssignment_0_1.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAmountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAmountINTTerminalRuleCall_2_0 = (RuleCall)cAmountAssignment_2.eContents().get(0);
		private final Assignment cFrequencyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFrequencyAttributeSettingFrequencyEnumRuleCall_3_0 = (RuleCall)cFrequencyAssignment_3.eContents().get(0);
		
		//AttributeSetting:
		//	(positive?='increments' | negative?='decrements') 'by' amount=INT frequency=AttributeSettingFrequency;
		@Override public ParserRule getRule() { return rule; }
		
		//(positive?='increments' | negative?='decrements') 'by' amount=INT frequency=AttributeSettingFrequency
		public Group getGroup() { return cGroup; }
		
		//positive?='increments' | negative?='decrements'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//positive?='increments'
		public Assignment getPositiveAssignment_0_0() { return cPositiveAssignment_0_0; }
		
		//'increments'
		public Keyword getPositiveIncrementsKeyword_0_0_0() { return cPositiveIncrementsKeyword_0_0_0; }
		
		//negative?='decrements'
		public Assignment getNegativeAssignment_0_1() { return cNegativeAssignment_0_1; }
		
		//'decrements'
		public Keyword getNegativeDecrementsKeyword_0_1_0() { return cNegativeDecrementsKeyword_0_1_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//amount=INT
		public Assignment getAmountAssignment_2() { return cAmountAssignment_2; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_2_0() { return cAmountINTTerminalRuleCall_2_0; }
		
		//frequency=AttributeSettingFrequency
		public Assignment getFrequencyAssignment_3() { return cFrequencyAssignment_3; }
		
		//AttributeSettingFrequency
		public RuleCall getFrequencyAttributeSettingFrequencyEnumRuleCall_3_0() { return cFrequencyAttributeSettingFrequencyEnumRuleCall_3_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHappeningEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Events
		// */ Event:
		//	HappeningEvent | ActionEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//HappeningEvent | ActionEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HappeningEvent
		public RuleCall getHappeningEventParserRuleCall_0() { return cHappeningEventParserRuleCall_0; }
		
		//ActionEvent
		public RuleCall getActionEventParserRuleCall_1() { return cActionEventParserRuleCall_1; }
	}
	public class HappeningEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.HappeningEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cOpeningAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cOpeningOpeningKeyword_0_0_0 = (Keyword)cOpeningAssignment_0_0.eContents().get(0);
		private final Assignment cEndingAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cEndingEndingKeyword_0_1_0 = (Keyword)cEndingAssignment_0_1.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPriorityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPriorityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPriorityEventPriorityEnumRuleCall_4_1_0 = (RuleCall)cPriorityAssignment_4_1.eContents().get(0);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cShortDescriptionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cShortDescriptionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cShortDescriptionSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cShortDescriptionAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cTriggersKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTriggerAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cTriggerEventCrossReference_8_1_0 = (CrossReference)cTriggerAssignment_8_1.eContents().get(0);
		private final RuleCall cTriggerEventIDTerminalRuleCall_8_1_0_1 = (RuleCall)cTriggerEventCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cMayTriggerKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Assignment cMayTriggersAssignment_9_1_0 = (Assignment)cGroup_9_1.eContents().get(0);
		private final CrossReference cMayTriggersEventCrossReference_9_1_0_0 = (CrossReference)cMayTriggersAssignment_9_1_0.eContents().get(0);
		private final RuleCall cMayTriggersEventIDTerminalRuleCall_9_1_0_0_1 = (RuleCall)cMayTriggersEventCrossReference_9_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_1 = (Keyword)cGroup_9_1.eContents().get(1);
		private final Assignment cMayTriggersAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final CrossReference cMayTriggersEventCrossReference_9_2_0 = (CrossReference)cMayTriggersAssignment_9_2.eContents().get(0);
		private final RuleCall cMayTriggersEventIDTerminalRuleCall_9_2_0_1 = (RuleCall)cMayTriggersEventCrossReference_9_2_0.eContents().get(1);
		private final Assignment cConditionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConditionsConditionParserRuleCall_10_0 = (RuleCall)cConditionsAssignment_10.eContents().get(0);
		private final Assignment cChangesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cChangesChangeParserRuleCall_11_0 = (RuleCall)cChangesAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//HappeningEvent:
		//	(opening?='opening' | ending?='ending')?
		//	'event' name=ID '{' ('priority:' priority=EventPriority)?
		//	'description:' description=STRING ('short-description:' shortDescription=STRING)? ('triggers:' trigger=[Event])?
		//	('may-trigger:' (mayTriggers+=[Event] ',')* mayTriggers+=[Event])?
		//	conditions+=Condition*
		//	changes+=Change*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(opening?='opening' | ending?='ending')? 'event' name=ID '{' ('priority:' priority=EventPriority)? 'description:'
		//description=STRING ('short-description:' shortDescription=STRING)? ('triggers:' trigger=[Event])? ('may-trigger:'
		//(mayTriggers+=[Event] ',')* mayTriggers+=[Event])? conditions+=Condition* changes+=Change* '}'
		public Group getGroup() { return cGroup; }
		
		//(opening?='opening' | ending?='ending')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//opening?='opening'
		public Assignment getOpeningAssignment_0_0() { return cOpeningAssignment_0_0; }
		
		//'opening'
		public Keyword getOpeningOpeningKeyword_0_0_0() { return cOpeningOpeningKeyword_0_0_0; }
		
		//ending?='ending'
		public Assignment getEndingAssignment_0_1() { return cEndingAssignment_0_1; }
		
		//'ending'
		public Keyword getEndingEndingKeyword_0_1_0() { return cEndingEndingKeyword_0_1_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('priority:' priority=EventPriority)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'priority:'
		public Keyword getPriorityKeyword_4_0() { return cPriorityKeyword_4_0; }
		
		//priority=EventPriority
		public Assignment getPriorityAssignment_4_1() { return cPriorityAssignment_4_1; }
		
		//EventPriority
		public RuleCall getPriorityEventPriorityEnumRuleCall_4_1_0() { return cPriorityEventPriorityEnumRuleCall_4_1_0; }
		
		//'description:'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_6_0() { return cDescriptionSTRINGTerminalRuleCall_6_0; }
		
		//('short-description:' shortDescription=STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'short-description:'
		public Keyword getShortDescriptionKeyword_7_0() { return cShortDescriptionKeyword_7_0; }
		
		//shortDescription=STRING
		public Assignment getShortDescriptionAssignment_7_1() { return cShortDescriptionAssignment_7_1; }
		
		//STRING
		public RuleCall getShortDescriptionSTRINGTerminalRuleCall_7_1_0() { return cShortDescriptionSTRINGTerminalRuleCall_7_1_0; }
		
		//('triggers:' trigger=[Event])?
		public Group getGroup_8() { return cGroup_8; }
		
		//'triggers:'
		public Keyword getTriggersKeyword_8_0() { return cTriggersKeyword_8_0; }
		
		//trigger=[Event]
		public Assignment getTriggerAssignment_8_1() { return cTriggerAssignment_8_1; }
		
		//[Event]
		public CrossReference getTriggerEventCrossReference_8_1_0() { return cTriggerEventCrossReference_8_1_0; }
		
		//ID
		public RuleCall getTriggerEventIDTerminalRuleCall_8_1_0_1() { return cTriggerEventIDTerminalRuleCall_8_1_0_1; }
		
		//('may-trigger:' (mayTriggers+=[Event] ',')* mayTriggers+=[Event])?
		public Group getGroup_9() { return cGroup_9; }
		
		//'may-trigger:'
		public Keyword getMayTriggerKeyword_9_0() { return cMayTriggerKeyword_9_0; }
		
		//(mayTriggers+=[Event] ',')*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//mayTriggers+=[Event]
		public Assignment getMayTriggersAssignment_9_1_0() { return cMayTriggersAssignment_9_1_0; }
		
		//[Event]
		public CrossReference getMayTriggersEventCrossReference_9_1_0_0() { return cMayTriggersEventCrossReference_9_1_0_0; }
		
		//ID
		public RuleCall getMayTriggersEventIDTerminalRuleCall_9_1_0_0_1() { return cMayTriggersEventIDTerminalRuleCall_9_1_0_0_1; }
		
		//','
		public Keyword getCommaKeyword_9_1_1() { return cCommaKeyword_9_1_1; }
		
		//mayTriggers+=[Event]
		public Assignment getMayTriggersAssignment_9_2() { return cMayTriggersAssignment_9_2; }
		
		//[Event]
		public CrossReference getMayTriggersEventCrossReference_9_2_0() { return cMayTriggersEventCrossReference_9_2_0; }
		
		//ID
		public RuleCall getMayTriggersEventIDTerminalRuleCall_9_2_0_1() { return cMayTriggersEventIDTerminalRuleCall_9_2_0_1; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment_10() { return cConditionsAssignment_10; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_10_0() { return cConditionsConditionParserRuleCall_10_0; }
		
		//changes+=Change*
		public Assignment getChangesAssignment_11() { return cChangesAssignment_11; }
		
		//Change
		public RuleCall getChangesChangeParserRuleCall_11_0() { return cChangesChangeParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class ActionEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.ActionEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPriorityKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPriorityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPriorityEventPriorityEnumRuleCall_3_1_0 = (RuleCall)cPriorityAssignment_3_1.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeActionTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cDescriptionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cShortDescriptionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cShortDescriptionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cShortDescriptionSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cShortDescriptionAssignment_8_1.eContents().get(0);
		private final Keyword cActorKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cActorAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cActorActorCrossReference_10_0 = (CrossReference)cActorAssignment_10.eContents().get(0);
		private final RuleCall cActorActorIDTerminalRuleCall_10_0_1 = (RuleCall)cActorActorCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cTriggersKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTriggerAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cTriggerEventCrossReference_11_1_0 = (CrossReference)cTriggerAssignment_11_1.eContents().get(0);
		private final RuleCall cTriggerEventIDTerminalRuleCall_11_1_0_1 = (RuleCall)cTriggerEventCrossReference_11_1_0.eContents().get(1);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cMayTriggerKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Assignment cMayTriggersAssignment_12_1_0 = (Assignment)cGroup_12_1.eContents().get(0);
		private final CrossReference cMayTriggersEventCrossReference_12_1_0_0 = (CrossReference)cMayTriggersAssignment_12_1_0.eContents().get(0);
		private final RuleCall cMayTriggersEventIDTerminalRuleCall_12_1_0_0_1 = (RuleCall)cMayTriggersEventCrossReference_12_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_12_1_1 = (Keyword)cGroup_12_1.eContents().get(1);
		private final Assignment cMayTriggersAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final CrossReference cMayTriggersEventCrossReference_12_2_0 = (CrossReference)cMayTriggersAssignment_12_2.eContents().get(0);
		private final RuleCall cMayTriggersEventIDTerminalRuleCall_12_2_0_1 = (RuleCall)cMayTriggersEventCrossReference_12_2_0.eContents().get(1);
		private final Assignment cConditionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cConditionsConditionParserRuleCall_13_0 = (RuleCall)cConditionsAssignment_13.eContents().get(0);
		private final Assignment cChangesAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cChangesChangeParserRuleCall_14_0 = (RuleCall)cChangesAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//ActionEvent:
		//	'action' name=ID '{' ('priority:' priority=EventPriority)?
		//	'type:' type=ActionType
		//	'description:' description=STRING ('short-description:' shortDescription=STRING)?
		//	'actor:' actor=[Actor] ('triggers:' trigger=[Event])? ('may-trigger:' (mayTriggers+=[Event] ',')*
		//	mayTriggers+=[Event])?
		//	conditions+=Condition*
		//	changes+=Change*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=ID '{' ('priority:' priority=EventPriority)? 'type:' type=ActionType 'description:' description=STRING
		//('short-description:' shortDescription=STRING)? 'actor:' actor=[Actor] ('triggers:' trigger=[Event])? ('may-trigger:'
		//(mayTriggers+=[Event] ',')* mayTriggers+=[Event])? conditions+=Condition* changes+=Change* '}'
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('priority:' priority=EventPriority)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'priority:'
		public Keyword getPriorityKeyword_3_0() { return cPriorityKeyword_3_0; }
		
		//priority=EventPriority
		public Assignment getPriorityAssignment_3_1() { return cPriorityAssignment_3_1; }
		
		//EventPriority
		public RuleCall getPriorityEventPriorityEnumRuleCall_3_1_0() { return cPriorityEventPriorityEnumRuleCall_3_1_0; }
		
		//'type:'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=ActionType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//ActionType
		public RuleCall getTypeActionTypeEnumRuleCall_5_0() { return cTypeActionTypeEnumRuleCall_5_0; }
		
		//'description:'
		public Keyword getDescriptionKeyword_6() { return cDescriptionKeyword_6; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//('short-description:' shortDescription=STRING)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'short-description:'
		public Keyword getShortDescriptionKeyword_8_0() { return cShortDescriptionKeyword_8_0; }
		
		//shortDescription=STRING
		public Assignment getShortDescriptionAssignment_8_1() { return cShortDescriptionAssignment_8_1; }
		
		//STRING
		public RuleCall getShortDescriptionSTRINGTerminalRuleCall_8_1_0() { return cShortDescriptionSTRINGTerminalRuleCall_8_1_0; }
		
		//'actor:'
		public Keyword getActorKeyword_9() { return cActorKeyword_9; }
		
		//actor=[Actor]
		public Assignment getActorAssignment_10() { return cActorAssignment_10; }
		
		//[Actor]
		public CrossReference getActorActorCrossReference_10_0() { return cActorActorCrossReference_10_0; }
		
		//ID
		public RuleCall getActorActorIDTerminalRuleCall_10_0_1() { return cActorActorIDTerminalRuleCall_10_0_1; }
		
		//('triggers:' trigger=[Event])?
		public Group getGroup_11() { return cGroup_11; }
		
		//'triggers:'
		public Keyword getTriggersKeyword_11_0() { return cTriggersKeyword_11_0; }
		
		//trigger=[Event]
		public Assignment getTriggerAssignment_11_1() { return cTriggerAssignment_11_1; }
		
		//[Event]
		public CrossReference getTriggerEventCrossReference_11_1_0() { return cTriggerEventCrossReference_11_1_0; }
		
		//ID
		public RuleCall getTriggerEventIDTerminalRuleCall_11_1_0_1() { return cTriggerEventIDTerminalRuleCall_11_1_0_1; }
		
		//('may-trigger:' (mayTriggers+=[Event] ',')* mayTriggers+=[Event])?
		public Group getGroup_12() { return cGroup_12; }
		
		//'may-trigger:'
		public Keyword getMayTriggerKeyword_12_0() { return cMayTriggerKeyword_12_0; }
		
		//(mayTriggers+=[Event] ',')*
		public Group getGroup_12_1() { return cGroup_12_1; }
		
		//mayTriggers+=[Event]
		public Assignment getMayTriggersAssignment_12_1_0() { return cMayTriggersAssignment_12_1_0; }
		
		//[Event]
		public CrossReference getMayTriggersEventCrossReference_12_1_0_0() { return cMayTriggersEventCrossReference_12_1_0_0; }
		
		//ID
		public RuleCall getMayTriggersEventIDTerminalRuleCall_12_1_0_0_1() { return cMayTriggersEventIDTerminalRuleCall_12_1_0_0_1; }
		
		//','
		public Keyword getCommaKeyword_12_1_1() { return cCommaKeyword_12_1_1; }
		
		//mayTriggers+=[Event]
		public Assignment getMayTriggersAssignment_12_2() { return cMayTriggersAssignment_12_2; }
		
		//[Event]
		public CrossReference getMayTriggersEventCrossReference_12_2_0() { return cMayTriggersEventCrossReference_12_2_0; }
		
		//ID
		public RuleCall getMayTriggersEventIDTerminalRuleCall_12_2_0_1() { return cMayTriggersEventIDTerminalRuleCall_12_2_0_1; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment_13() { return cConditionsAssignment_13; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_13_0() { return cConditionsConditionParserRuleCall_13_0; }
		
		//changes+=Change*
		public Assignment getChangesAssignment_14() { return cChangesAssignment_14; }
		
		//Change
		public RuleCall getChangesChangeParserRuleCall_14_0() { return cChangesChangeParserRuleCall_14_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrderConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTriggerConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * Conditions
		// */ Condition:
		//	ExpressionCondition | OrderCondition | TriggerCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionCondition | OrderCondition | TriggerCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionCondition
		public RuleCall getExpressionConditionParserRuleCall_0() { return cExpressionConditionParserRuleCall_0; }
		
		//OrderCondition
		public RuleCall getOrderConditionParserRuleCall_1() { return cOrderConditionParserRuleCall_1; }
		
		//TriggerCondition
		public RuleCall getTriggerConditionParserRuleCall_2() { return cTriggerConditionParserRuleCall_2; }
	}
	public class ExpressionConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.ExpressionCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//ExpressionCondition:
		//	'require:' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'require:' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//'require:'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
	}
	public class OrderConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.OrderCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrderOrderEnumRuleCall_1_0 = (RuleCall)cOrderAssignment_1.eContents().get(0);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventEventCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_2_0_1 = (RuleCall)cEventEventCrossReference_2_0.eContents().get(1);
		
		//OrderCondition:
		//	'require:' order=Order event=[Event];
		@Override public ParserRule getRule() { return rule; }
		
		//'require:' order=Order event=[Event]
		public Group getGroup() { return cGroup; }
		
		//'require:'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//order=Order
		public Assignment getOrderAssignment_1() { return cOrderAssignment_1; }
		
		//Order
		public RuleCall getOrderOrderEnumRuleCall_1_0() { return cOrderOrderEnumRuleCall_1_0; }
		
		//event=[Event]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_2_0() { return cEventEventCrossReference_2_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_2_0_1() { return cEventEventIDTerminalRuleCall_2_0_1; }
	}
	public class TriggerConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.TriggerCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTriggerBeTriggeredKeyword_1_0 = (Keyword)cTriggerAssignment_1.eContents().get(0);
		
		//TriggerCondition:
		//	'require:' trigger?='be-triggered';
		@Override public ParserRule getRule() { return rule; }
		
		//'require:' trigger?='be-triggered'
		public Group getGroup() { return cGroup; }
		
		//'require:'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//trigger?='be-triggered'
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }
		
		//'be-triggered'
		public Keyword getTriggerBeTriggeredKeyword_1_0() { return cTriggerBeTriggeredKeyword_1_0; }
	}
	public class ChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Change");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistentChangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoryDataChangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Changes
		// */ Change:
		//	ExistentChange | StoryDataChange;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistentChange | StoryDataChange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistentChange
		public RuleCall getExistentChangeParserRuleCall_0() { return cExistentChangeParserRuleCall_0; }
		
		//StoryDataChange
		public RuleCall getStoryDataChangeParserRuleCall_1() { return cStoryDataChangeParserRuleCall_1; }
	}
	public class ExistentChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.ExistentChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExistentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExistentExistentCrossReference_1_0 = (CrossReference)cExistentAssignment_1.eContents().get(0);
		private final RuleCall cExistentExistentIDTerminalRuleCall_1_0_1 = (RuleCall)cExistentExistentCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cAttributeAttributeCrossReference_3_0.eContents().get(1);
		private final Assignment cOpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOpAttributionOperatorEnumRuleCall_4_0 = (RuleCall)cOpAssignment_4.eContents().get(0);
		private final Assignment cTermAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cTermAlternatives_5_0 = (Alternatives)cTermAssignment_5.eContents().get(0);
		private final RuleCall cTermIntegerTermParserRuleCall_5_0_0 = (RuleCall)cTermAlternatives_5_0.eContents().get(0);
		private final RuleCall cTermBooleanTermParserRuleCall_5_0_1 = (RuleCall)cTermAlternatives_5_0.eContents().get(1);
		
		//ExistentChange:
		//	'change:' existent=[Existent] '.' attribute=[Attribute] op=AttributionOperator term=(IntegerTerm | BooleanTerm);
		@Override public ParserRule getRule() { return rule; }
		
		//'change:' existent=[Existent] '.' attribute=[Attribute] op=AttributionOperator term=(IntegerTerm | BooleanTerm)
		public Group getGroup() { return cGroup; }
		
		//'change:'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//existent=[Existent]
		public Assignment getExistentAssignment_1() { return cExistentAssignment_1; }
		
		//[Existent]
		public CrossReference getExistentExistentCrossReference_1_0() { return cExistentExistentCrossReference_1_0; }
		
		//ID
		public RuleCall getExistentExistentIDTerminalRuleCall_1_0_1() { return cExistentExistentIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_3_0() { return cAttributeAttributeCrossReference_3_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_3_0_1() { return cAttributeAttributeIDTerminalRuleCall_3_0_1; }
		
		//op=AttributionOperator
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//AttributionOperator
		public RuleCall getOpAttributionOperatorEnumRuleCall_4_0() { return cOpAttributionOperatorEnumRuleCall_4_0; }
		
		//term=(IntegerTerm | BooleanTerm)
		public Assignment getTermAssignment_5() { return cTermAssignment_5; }
		
		//(IntegerTerm | BooleanTerm)
		public Alternatives getTermAlternatives_5_0() { return cTermAlternatives_5_0; }
		
		//IntegerTerm
		public RuleCall getTermIntegerTermParserRuleCall_5_0_0() { return cTermIntegerTermParserRuleCall_5_0_0; }
		
		//BooleanTerm
		public RuleCall getTermBooleanTermParserRuleCall_5_0_1() { return cTermBooleanTermParserRuleCall_5_0_1; }
	}
	public class StoryDataChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.StoryDataChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cAttributeAttributeCrossReference_3_0.eContents().get(1);
		private final Assignment cOpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOpAttributionOperatorEnumRuleCall_4_0 = (RuleCall)cOpAssignment_4.eContents().get(0);
		private final Assignment cTermAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cTermAlternatives_5_0 = (Alternatives)cTermAssignment_5.eContents().get(0);
		private final RuleCall cTermIntegerTermParserRuleCall_5_0_0 = (RuleCall)cTermAlternatives_5_0.eContents().get(0);
		private final RuleCall cTermBooleanTermParserRuleCall_5_0_1 = (RuleCall)cTermAlternatives_5_0.eContents().get(1);
		
		//StoryDataChange:
		//	'change:' 'Story' '.' attribute=[Attribute] op=AttributionOperator term=(IntegerTerm | BooleanTerm);
		@Override public ParserRule getRule() { return rule; }
		
		//'change:' 'Story' '.' attribute=[Attribute] op=AttributionOperator term=(IntegerTerm | BooleanTerm)
		public Group getGroup() { return cGroup; }
		
		//'change:'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//'Story'
		public Keyword getStoryKeyword_1() { return cStoryKeyword_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_3_0() { return cAttributeAttributeCrossReference_3_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_3_0_1() { return cAttributeAttributeIDTerminalRuleCall_3_0_1; }
		
		//op=AttributionOperator
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//AttributionOperator
		public RuleCall getOpAttributionOperatorEnumRuleCall_4_0() { return cOpAttributionOperatorEnumRuleCall_4_0; }
		
		//term=(IntegerTerm | BooleanTerm)
		public Assignment getTermAssignment_5() { return cTermAssignment_5; }
		
		//(IntegerTerm | BooleanTerm)
		public Alternatives getTermAlternatives_5_0() { return cTermAlternatives_5_0; }
		
		//IntegerTerm
		public RuleCall getTermIntegerTermParserRuleCall_5_0_0() { return cTermIntegerTermParserRuleCall_5_0_0; }
		
		//BooleanTerm
		public RuleCall getTermBooleanTermParserRuleCall_5_0_1() { return cTermBooleanTermParserRuleCall_5_0_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Expression");
		private final RuleCall cBinaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*
		// * Expressions
		// */ Expression:
		//	BinaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall() { return cBinaryExpressionParserRuleCall; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOrExpressionOperandsAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cOperandsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOperandsUnitExpressionParserRuleCall_1_0_2_0 = (RuleCall)cOperandsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cOrKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cOperandsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cOperandsUnitExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cOperandsAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cAndExpressionOperandsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cOperandsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cOperandsUnitExpressionParserRuleCall_1_1_2_0 = (RuleCall)cOperandsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cAndKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cOperandsUnitExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cOperandsAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cComparisonExpressionLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_1_2_1_0 = (RuleCall)cOperatorAssignment_1_2_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightUnitExpressionParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//BinaryExpression Expression:
		//	UnitExpression ({OrExpression.operands+=current} 'or' operands+=UnitExpression ('or' operands+=UnitExpression)* |
		//	{AndExpression.operands+=current} 'and' operands+=UnitExpression ('and' operands+=UnitExpression)* |
		//	{ComparisonExpression.left=current} operator=ComparisonOperator right=UnitExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitExpression ({OrExpression.operands+=current} 'or' operands+=UnitExpression ('or' operands+=UnitExpression)* |
		//{AndExpression.operands+=current} 'and' operands+=UnitExpression ('and' operands+=UnitExpression)* |
		//{ComparisonExpression.left=current} operator=ComparisonOperator right=UnitExpression)?
		public Group getGroup() { return cGroup; }
		
		//UnitExpression
		public RuleCall getUnitExpressionParserRuleCall_0() { return cUnitExpressionParserRuleCall_0; }
		
		//({OrExpression.operands+=current} 'or' operands+=UnitExpression ('or' operands+=UnitExpression)* |
		//{AndExpression.operands+=current} 'and' operands+=UnitExpression ('and' operands+=UnitExpression)* |
		//{ComparisonExpression.left=current} operator=ComparisonOperator right=UnitExpression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{OrExpression.operands+=current} 'or' operands+=UnitExpression ('or' operands+=UnitExpression)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OrExpression.operands+=current}
		public Action getOrExpressionOperandsAction_1_0_0() { return cOrExpressionOperandsAction_1_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1_0_1() { return cOrKeyword_1_0_1; }
		
		//operands+=UnitExpression
		public Assignment getOperandsAssignment_1_0_2() { return cOperandsAssignment_1_0_2; }
		
		//UnitExpression
		public RuleCall getOperandsUnitExpressionParserRuleCall_1_0_2_0() { return cOperandsUnitExpressionParserRuleCall_1_0_2_0; }
		
		//('or' operands+=UnitExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'or'
		public Keyword getOrKeyword_1_0_3_0() { return cOrKeyword_1_0_3_0; }
		
		//operands+=UnitExpression
		public Assignment getOperandsAssignment_1_0_3_1() { return cOperandsAssignment_1_0_3_1; }
		
		//UnitExpression
		public RuleCall getOperandsUnitExpressionParserRuleCall_1_0_3_1_0() { return cOperandsUnitExpressionParserRuleCall_1_0_3_1_0; }
		
		//{AndExpression.operands+=current} 'and' operands+=UnitExpression ('and' operands+=UnitExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{AndExpression.operands+=current}
		public Action getAndExpressionOperandsAction_1_1_0() { return cAndExpressionOperandsAction_1_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1_1() { return cAndKeyword_1_1_1; }
		
		//operands+=UnitExpression
		public Assignment getOperandsAssignment_1_1_2() { return cOperandsAssignment_1_1_2; }
		
		//UnitExpression
		public RuleCall getOperandsUnitExpressionParserRuleCall_1_1_2_0() { return cOperandsUnitExpressionParserRuleCall_1_1_2_0; }
		
		//('and' operands+=UnitExpression)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'and'
		public Keyword getAndKeyword_1_1_3_0() { return cAndKeyword_1_1_3_0; }
		
		//operands+=UnitExpression
		public Assignment getOperandsAssignment_1_1_3_1() { return cOperandsAssignment_1_1_3_1; }
		
		//UnitExpression
		public RuleCall getOperandsUnitExpressionParserRuleCall_1_1_3_1_0() { return cOperandsUnitExpressionParserRuleCall_1_1_3_1_0; }
		
		//{ComparisonExpression.left=current} operator=ComparisonOperator right=UnitExpression
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_2_0() { return cComparisonExpressionLeftAction_1_2_0; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_1_2_1() { return cOperatorAssignment_1_2_1; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_1_2_1_0() { return cOperatorComparisonOperatorEnumRuleCall_1_2_1_0; }
		
		//right=UnitExpression
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//UnitExpression
		public RuleCall getRightUnitExpressionParserRuleCall_1_2_2_0() { return cRightUnitExpressionParserRuleCall_1_2_2_0; }
	}
	public class UnitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.UnitExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNegationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitExpression Expression:
		//	NegationExpression | UnitaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NegationExpression | UnitaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NegationExpression
		public RuleCall getNegationExpressionParserRuleCall_0() { return cNegationExpressionParserRuleCall_0; }
		
		//UnitaryExpression
		public RuleCall getUnitaryExpressionParserRuleCall_1() { return cUnitaryExpressionParserRuleCall_1; }
	}
	public class NegationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.NegationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNegationExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandUnitExpressionParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//NegationExpression Expression:
		//	{NegationExpression} 'not' operand=UnitExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{NegationExpression} 'not' operand=UnitExpression
		public Group getGroup() { return cGroup; }
		
		//{NegationExpression}
		public Action getNegationExpressionAction_0() { return cNegationExpressionAction_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
		
		//operand=UnitExpression
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//UnitExpression
		public RuleCall getOperandUnitExpressionParserRuleCall_2_0() { return cOperandUnitExpressionParserRuleCall_2_0; }
	}
	public class UnitaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.UnitaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitaryExpression Expression:
		//	"(" Expression ")"
		//	| Term;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Expression ")" | Term
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Term
		public RuleCall getTermParserRuleCall_1() { return cTermParserRuleCall_1; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistentAttributeTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoryAttributeTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanTermParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Term:
		//	ExistentAttributeTerm | StoryAttributeTerm | IntegerTerm | BooleanTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistentAttributeTerm | StoryAttributeTerm | IntegerTerm | BooleanTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistentAttributeTerm
		public RuleCall getExistentAttributeTermParserRuleCall_0() { return cExistentAttributeTermParserRuleCall_0; }
		
		//StoryAttributeTerm
		public RuleCall getStoryAttributeTermParserRuleCall_1() { return cStoryAttributeTermParserRuleCall_1; }
		
		//IntegerTerm
		public RuleCall getIntegerTermParserRuleCall_2() { return cIntegerTermParserRuleCall_2; }
		
		//BooleanTerm
		public RuleCall getBooleanTermParserRuleCall_3() { return cBooleanTermParserRuleCall_3; }
	}
	public class ExistentAttributeTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.ExistentAttributeTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExistentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExistentExistentCrossReference_0_0 = (CrossReference)cExistentAssignment_0.eContents().get(0);
		private final RuleCall cExistentExistentIDTerminalRuleCall_0_0_1 = (RuleCall)cExistentExistentCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		
		//ExistentAttributeTerm:
		//	existent=[Existent] '.' attribute=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//existent=[Existent] '.' attribute=[Attribute]
		public Group getGroup() { return cGroup; }
		
		//existent=[Existent]
		public Assignment getExistentAssignment_0() { return cExistentAssignment_0; }
		
		//[Existent]
		public CrossReference getExistentExistentCrossReference_0_0() { return cExistentExistentCrossReference_0_0; }
		
		//ID
		public RuleCall getExistentExistentIDTerminalRuleCall_0_0_1() { return cExistentExistentIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_0_1; }
	}
	public class StoryAttributeTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.StoryAttributeTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		
		//StoryAttributeTerm:
		//	'Story' '.' attribute=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//'Story' '.' attribute=[Attribute]
		public Group getGroup() { return cGroup; }
		
		//'Story'
		public Keyword getStoryKeyword_0() { return cStoryKeyword_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_0_1; }
	}
	public class IntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.IntegerTerm");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerTerm:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class BooleanTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.BooleanTerm");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanTerm:
		//	value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	
	public class ActionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.ActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVISUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVISUALVisualKeyword_0_0 = (Keyword)cVISUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTERACTIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTERACTIONInteractionKeyword_1_0 = (Keyword)cINTERACTIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMOVEMENTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMOVEMENTMovementKeyword_2_0 = (Keyword)cMOVEMENTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMMUNICATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMMUNICATIONCommunicationKeyword_3_0 = (Keyword)cCOMMUNICATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCOMBATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCOMBATCombatKeyword_4_0 = (Keyword)cCOMBATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIDLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIDLEIdleKeyword_5_0 = (Keyword)cIDLEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ActionType:
		//	VISUAL='visual' |
		//	INTERACTION='interaction' |
		//	MOVEMENT='movement' |
		//	COMMUNICATION='communication' |
		//	COMBAT='combat' |
		//	IDLE='idle';
		public EnumRule getRule() { return rule; }
		
		//VISUAL='visual' | INTERACTION='interaction' | MOVEMENT='movement' | COMMUNICATION='communication' | COMBAT='combat' |
		//IDLE='idle'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VISUAL='visual'
		public EnumLiteralDeclaration getVISUALEnumLiteralDeclaration_0() { return cVISUALEnumLiteralDeclaration_0; }
		
		//'visual'
		public Keyword getVISUALVisualKeyword_0_0() { return cVISUALVisualKeyword_0_0; }
		
		//INTERACTION='interaction'
		public EnumLiteralDeclaration getINTERACTIONEnumLiteralDeclaration_1() { return cINTERACTIONEnumLiteralDeclaration_1; }
		
		//'interaction'
		public Keyword getINTERACTIONInteractionKeyword_1_0() { return cINTERACTIONInteractionKeyword_1_0; }
		
		//MOVEMENT='movement'
		public EnumLiteralDeclaration getMOVEMENTEnumLiteralDeclaration_2() { return cMOVEMENTEnumLiteralDeclaration_2; }
		
		//'movement'
		public Keyword getMOVEMENTMovementKeyword_2_0() { return cMOVEMENTMovementKeyword_2_0; }
		
		//COMMUNICATION='communication'
		public EnumLiteralDeclaration getCOMMUNICATIONEnumLiteralDeclaration_3() { return cCOMMUNICATIONEnumLiteralDeclaration_3; }
		
		//'communication'
		public Keyword getCOMMUNICATIONCommunicationKeyword_3_0() { return cCOMMUNICATIONCommunicationKeyword_3_0; }
		
		//COMBAT='combat'
		public EnumLiteralDeclaration getCOMBATEnumLiteralDeclaration_4() { return cCOMBATEnumLiteralDeclaration_4; }
		
		//'combat'
		public Keyword getCOMBATCombatKeyword_4_0() { return cCOMBATCombatKeyword_4_0; }
		
		//IDLE='idle'
		public EnumLiteralDeclaration getIDLEEnumLiteralDeclaration_5() { return cIDLEEnumLiteralDeclaration_5; }
		
		//'idle'
		public Keyword getIDLEIdleKeyword_5_0() { return cIDLEIdleKeyword_5_0; }
	}
	public class ComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLELessThanSignEqualsSignKeyword_1_0 = (Keyword)cLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNEQEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGTGreaterThanSignKeyword_5_0 = (Keyword)cGTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparisonOperator:
		//	LT="<" |
		//	LE="<=" |
		//	EQ="==" |
		//	NEQ="!=" |
		//	GE=">=" |
		//	GT=">";
		public EnumRule getRule() { return rule; }
		
		//LT="<" | LE="<=" | EQ="==" | NEQ="!=" | GE=">=" | GT=">"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }
		
		//LE="<="
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_1() { return cLEEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_1_0() { return cLELessThanSignEqualsSignKeyword_1_0; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_2_0() { return cEQEqualsSignEqualsSignKeyword_2_0; }
		
		//NEQ="!="
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_3() { return cNEQEnumLiteralDeclaration_3; }
		
		//"!="
		public Keyword getNEQExclamationMarkEqualsSignKeyword_3_0() { return cNEQExclamationMarkEqualsSignKeyword_3_0; }
		
		//GE=">="
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_4() { return cGEEnumLiteralDeclaration_4; }
		
		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_4_0() { return cGEGreaterThanSignEqualsSignKeyword_4_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_5() { return cGTEnumLiteralDeclaration_5; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_5_0() { return cGTGreaterThanSignKeyword_5_0; }
	}
	public class AttributionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.AttributionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINCREMENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINCREMENTPlusSignEqualsSignKeyword_1_0 = (Keyword)cINCREMENTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDECREMENTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDECREMENTHyphenMinusEqualsSignKeyword_2_0 = (Keyword)cDECREMENTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributionOperator:
		//	ASSIGN='=' |
		//	INCREMENT='+=' |
		//	DECREMENT='-=';
		public EnumRule getRule() { return rule; }
		
		//ASSIGN='=' | INCREMENT='+=' | DECREMENT='-='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGN='='
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }
		
		//INCREMENT='+='
		public EnumLiteralDeclaration getINCREMENTEnumLiteralDeclaration_1() { return cINCREMENTEnumLiteralDeclaration_1; }
		
		//'+='
		public Keyword getINCREMENTPlusSignEqualsSignKeyword_1_0() { return cINCREMENTPlusSignEqualsSignKeyword_1_0; }
		
		//DECREMENT='-='
		public EnumLiteralDeclaration getDECREMENTEnumLiteralDeclaration_2() { return cDECREMENTEnumLiteralDeclaration_2; }
		
		//'-='
		public Keyword getDECREMENTHyphenMinusEqualsSignKeyword_2_0() { return cDECREMENTHyphenMinusEqualsSignKeyword_2_0; }
	}
	public class OrderElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.Order");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAFTEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAFTERAfterKeyword_0_0 = (Keyword)cAFTEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEFOREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBEFOREBeforeKeyword_1_0 = (Keyword)cBEFOREEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Order:
		//	AFTER='after' |
		//	BEFORE='before';
		public EnumRule getRule() { return rule; }
		
		//AFTER='after' | BEFORE='before'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AFTER='after'
		public EnumLiteralDeclaration getAFTEREnumLiteralDeclaration_0() { return cAFTEREnumLiteralDeclaration_0; }
		
		//'after'
		public Keyword getAFTERAfterKeyword_0_0() { return cAFTERAfterKeyword_0_0; }
		
		//BEFORE='before'
		public EnumLiteralDeclaration getBEFOREEnumLiteralDeclaration_1() { return cBEFOREEnumLiteralDeclaration_1; }
		
		//'before'
		public Keyword getBEFOREBeforeKeyword_1_0() { return cBEFOREBeforeKeyword_1_0; }
	}
	public class AttributeSettingFrequencyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.AttributeSettingFrequency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEVERY_EVENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEVERY_EVENTEveryEventKeyword_0_0 = (Keyword)cEVERY_EVENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEVERY_HAPPENINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEVERY_HAPPENINGEveryHappeningKeyword_1_0 = (Keyword)cEVERY_HAPPENINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEVERY_ACTIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEVERY_ACTIONEveryActionKeyword_2_0 = (Keyword)cEVERY_ACTIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEVERY_PLAYER_ACTIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEVERY_PLAYER_ACTIONEveryPlayerActionKeyword_3_0 = (Keyword)cEVERY_PLAYER_ACTIONEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AttributeSettingFrequency:
		//	EVERY_EVENT='every event' |
		//	EVERY_HAPPENING='every happening' |
		//	EVERY_ACTION='every action' |
		//	EVERY_PLAYER_ACTION='every player action';
		public EnumRule getRule() { return rule; }
		
		//EVERY_EVENT='every event' | EVERY_HAPPENING='every happening' | EVERY_ACTION='every action' |
		//EVERY_PLAYER_ACTION='every player action'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EVERY_EVENT='every event'
		public EnumLiteralDeclaration getEVERY_EVENTEnumLiteralDeclaration_0() { return cEVERY_EVENTEnumLiteralDeclaration_0; }
		
		//'every event'
		public Keyword getEVERY_EVENTEveryEventKeyword_0_0() { return cEVERY_EVENTEveryEventKeyword_0_0; }
		
		//EVERY_HAPPENING='every happening'
		public EnumLiteralDeclaration getEVERY_HAPPENINGEnumLiteralDeclaration_1() { return cEVERY_HAPPENINGEnumLiteralDeclaration_1; }
		
		//'every happening'
		public Keyword getEVERY_HAPPENINGEveryHappeningKeyword_1_0() { return cEVERY_HAPPENINGEveryHappeningKeyword_1_0; }
		
		//EVERY_ACTION='every action'
		public EnumLiteralDeclaration getEVERY_ACTIONEnumLiteralDeclaration_2() { return cEVERY_ACTIONEnumLiteralDeclaration_2; }
		
		//'every action'
		public Keyword getEVERY_ACTIONEveryActionKeyword_2_0() { return cEVERY_ACTIONEveryActionKeyword_2_0; }
		
		//EVERY_PLAYER_ACTION='every player action'
		public EnumLiteralDeclaration getEVERY_PLAYER_ACTIONEnumLiteralDeclaration_3() { return cEVERY_PLAYER_ACTIONEnumLiteralDeclaration_3; }
		
		//'every player action'
		public Keyword getEVERY_PLAYER_ACTIONEveryPlayerActionKeyword_3_0() { return cEVERY_PLAYER_ACTIONEveryPlayerActionKeyword_3_0; }
	}
	public class EventPriorityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.pg.StoryGen.EventPriority");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNormalKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHIGHHighKeyword_1_0 = (Keyword)cHIGHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVERY_HIGHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVERY_HIGHVeryHighKeyword_2_0 = (Keyword)cVERY_HIGHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum EventPriority:
		//	NORMAL='normal' |
		//	HIGH='high' |
		//	VERY_HIGH='veryHigh';
		public EnumRule getRule() { return rule; }
		
		//NORMAL='normal' | HIGH='high' | VERY_HIGH='veryHigh'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NORMAL='normal'
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }
		
		//'normal'
		public Keyword getNORMALNormalKeyword_0_0() { return cNORMALNormalKeyword_0_0; }
		
		//HIGH='high'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_1() { return cHIGHEnumLiteralDeclaration_1; }
		
		//'high'
		public Keyword getHIGHHighKeyword_1_0() { return cHIGHHighKeyword_1_0; }
		
		//VERY_HIGH='veryHigh'
		public EnumLiteralDeclaration getVERY_HIGHEnumLiteralDeclaration_2() { return cVERY_HIGHEnumLiteralDeclaration_2; }
		
		//'veryHigh'
		public Keyword getVERY_HIGHVeryHighKeyword_2_0() { return cVERY_HIGHVeryHighKeyword_2_0; }
	}
	
	private final StoryElements pStory;
	private final StoryDataElements pStoryData;
	private final SpaceElements pSpace;
	private final PlotElements pPlot;
	private final ExistentElements pExistent;
	private final ActorElements pActor;
	private final ObjectElements pObject;
	private final AttributeElements pAttribute;
	private final FactAttributeElements pFactAttribute;
	private final QuantityAttributeElements pQuantityAttribute;
	private final AttributeSettingElements pAttributeSetting;
	private final EventElements pEvent;
	private final HappeningEventElements pHappeningEvent;
	private final ActionEventElements pActionEvent;
	private final ConditionElements pCondition;
	private final ExpressionConditionElements pExpressionCondition;
	private final OrderConditionElements pOrderCondition;
	private final TriggerConditionElements pTriggerCondition;
	private final ChangeElements pChange;
	private final ExistentChangeElements pExistentChange;
	private final StoryDataChangeElements pStoryDataChange;
	private final ExpressionElements pExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final UnitExpressionElements pUnitExpression;
	private final NegationExpressionElements pNegationExpression;
	private final UnitaryExpressionElements pUnitaryExpression;
	private final TermElements pTerm;
	private final ExistentAttributeTermElements pExistentAttributeTerm;
	private final StoryAttributeTermElements pStoryAttributeTerm;
	private final IntegerTermElements pIntegerTerm;
	private final BooleanTermElements pBooleanTerm;
	private final ActionTypeElements eActionType;
	private final ComparisonOperatorElements eComparisonOperator;
	private final AttributionOperatorElements eAttributionOperator;
	private final OrderElements eOrder;
	private final AttributeSettingFrequencyElements eAttributeSettingFrequency;
	private final EventPriorityElements eEventPriority;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StoryGenGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStory = new StoryElements();
		this.pStoryData = new StoryDataElements();
		this.pSpace = new SpaceElements();
		this.pPlot = new PlotElements();
		this.pExistent = new ExistentElements();
		this.pActor = new ActorElements();
		this.pObject = new ObjectElements();
		this.pAttribute = new AttributeElements();
		this.pFactAttribute = new FactAttributeElements();
		this.pQuantityAttribute = new QuantityAttributeElements();
		this.pAttributeSetting = new AttributeSettingElements();
		this.pEvent = new EventElements();
		this.pHappeningEvent = new HappeningEventElements();
		this.pActionEvent = new ActionEventElements();
		this.pCondition = new ConditionElements();
		this.pExpressionCondition = new ExpressionConditionElements();
		this.pOrderCondition = new OrderConditionElements();
		this.pTriggerCondition = new TriggerConditionElements();
		this.pChange = new ChangeElements();
		this.pExistentChange = new ExistentChangeElements();
		this.pStoryDataChange = new StoryDataChangeElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pUnitExpression = new UnitExpressionElements();
		this.pNegationExpression = new NegationExpressionElements();
		this.pUnitaryExpression = new UnitaryExpressionElements();
		this.pTerm = new TermElements();
		this.pExistentAttributeTerm = new ExistentAttributeTermElements();
		this.pStoryAttributeTerm = new StoryAttributeTermElements();
		this.pIntegerTerm = new IntegerTermElements();
		this.pBooleanTerm = new BooleanTermElements();
		this.eActionType = new ActionTypeElements();
		this.eComparisonOperator = new ComparisonOperatorElements();
		this.eAttributionOperator = new AttributionOperatorElements();
		this.eOrder = new OrderElements();
		this.eAttributeSettingFrequency = new AttributeSettingFrequencyElements();
		this.eEventPriority = new EventPriorityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufes.inf.pg.StoryGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * Story
	// */ Story:
	//	data=StoryData
	//	space=Space
	//	plot=Plot;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	//StoryData:
	//	{StoryData} 'Story' 'data' '{'
	//	attributes+=Attribute*
	//	'}';
	public StoryDataElements getStoryDataAccess() {
		return pStoryData;
	}
	
	public ParserRule getStoryDataRule() {
		return getStoryDataAccess().getRule();
	}
	
	//Space:
	//	{Space} 'Space' '{'
	//	existents+=Existent*
	//	'}';
	public SpaceElements getSpaceAccess() {
		return pSpace;
	}
	
	public ParserRule getSpaceRule() {
		return getSpaceAccess().getRule();
	}
	
	//Plot:
	//	{Plot} 'Plot' '{'
	//	events+=Event*
	//	'}';
	public PlotElements getPlotAccess() {
		return pPlot;
	}
	
	public ParserRule getPlotRule() {
		return getPlotAccess().getRule();
	}
	
	///*
	// * Existents
	// */ Existent:
	//	Actor | Object;
	public ExistentElements getExistentAccess() {
		return pExistent;
	}
	
	public ParserRule getExistentRule() {
		return getExistentAccess().getRule();
	}
	
	//Actor:
	//	playable?='player'? 'actor' name=ID
	//	'{' 'name:' displayName=STRING attributes+=Attribute* '}';
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Object:
	//	'object' name=ID
	//	'{' attributes+=Attribute* '}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	///*
	// * Attributes
	// */ Attribute:
	//	FactAttribute | QuantityAttribute;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//FactAttribute:
	//	'fact' name=ID '=' (initValue=BooleanTerm | '(' macroExp=Expression ')');
	public FactAttributeElements getFactAttributeAccess() {
		return pFactAttribute;
	}
	
	public ParserRule getFactAttributeRule() {
		return getFactAttributeAccess().getRule();
	}
	
	//QuantityAttribute:
	//	'quantity' name=ID '=' initValue=IntegerTerm ('[' setting=AttributeSetting ']')?;
	public QuantityAttributeElements getQuantityAttributeAccess() {
		return pQuantityAttribute;
	}
	
	public ParserRule getQuantityAttributeRule() {
		return getQuantityAttributeAccess().getRule();
	}
	
	//AttributeSetting:
	//	(positive?='increments' | negative?='decrements') 'by' amount=INT frequency=AttributeSettingFrequency;
	public AttributeSettingElements getAttributeSettingAccess() {
		return pAttributeSetting;
	}
	
	public ParserRule getAttributeSettingRule() {
		return getAttributeSettingAccess().getRule();
	}
	
	///*
	// * Events
	// */ Event:
	//	HappeningEvent | ActionEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//HappeningEvent:
	//	(opening?='opening' | ending?='ending')?
	//	'event' name=ID '{' ('priority:' priority=EventPriority)?
	//	'description:' description=STRING ('short-description:' shortDescription=STRING)? ('triggers:' trigger=[Event])?
	//	('may-trigger:' (mayTriggers+=[Event] ',')* mayTriggers+=[Event])?
	//	conditions+=Condition*
	//	changes+=Change*
	//	'}';
	public HappeningEventElements getHappeningEventAccess() {
		return pHappeningEvent;
	}
	
	public ParserRule getHappeningEventRule() {
		return getHappeningEventAccess().getRule();
	}
	
	//ActionEvent:
	//	'action' name=ID '{' ('priority:' priority=EventPriority)?
	//	'type:' type=ActionType
	//	'description:' description=STRING ('short-description:' shortDescription=STRING)?
	//	'actor:' actor=[Actor] ('triggers:' trigger=[Event])? ('may-trigger:' (mayTriggers+=[Event] ',')*
	//	mayTriggers+=[Event])?
	//	conditions+=Condition*
	//	changes+=Change*
	//	'}';
	public ActionEventElements getActionEventAccess() {
		return pActionEvent;
	}
	
	public ParserRule getActionEventRule() {
		return getActionEventAccess().getRule();
	}
	
	///*
	// * Conditions
	// */ Condition:
	//	ExpressionCondition | OrderCondition | TriggerCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ExpressionCondition:
	//	'require:' exp=Expression;
	public ExpressionConditionElements getExpressionConditionAccess() {
		return pExpressionCondition;
	}
	
	public ParserRule getExpressionConditionRule() {
		return getExpressionConditionAccess().getRule();
	}
	
	//OrderCondition:
	//	'require:' order=Order event=[Event];
	public OrderConditionElements getOrderConditionAccess() {
		return pOrderCondition;
	}
	
	public ParserRule getOrderConditionRule() {
		return getOrderConditionAccess().getRule();
	}
	
	//TriggerCondition:
	//	'require:' trigger?='be-triggered';
	public TriggerConditionElements getTriggerConditionAccess() {
		return pTriggerCondition;
	}
	
	public ParserRule getTriggerConditionRule() {
		return getTriggerConditionAccess().getRule();
	}
	
	///*
	// * Changes
	// */ Change:
	//	ExistentChange | StoryDataChange;
	public ChangeElements getChangeAccess() {
		return pChange;
	}
	
	public ParserRule getChangeRule() {
		return getChangeAccess().getRule();
	}
	
	//ExistentChange:
	//	'change:' existent=[Existent] '.' attribute=[Attribute] op=AttributionOperator term=(IntegerTerm | BooleanTerm);
	public ExistentChangeElements getExistentChangeAccess() {
		return pExistentChange;
	}
	
	public ParserRule getExistentChangeRule() {
		return getExistentChangeAccess().getRule();
	}
	
	//StoryDataChange:
	//	'change:' 'Story' '.' attribute=[Attribute] op=AttributionOperator term=(IntegerTerm | BooleanTerm);
	public StoryDataChangeElements getStoryDataChangeAccess() {
		return pStoryDataChange;
	}
	
	public ParserRule getStoryDataChangeRule() {
		return getStoryDataChangeAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ Expression:
	//	BinaryExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinaryExpression Expression:
	//	UnitExpression ({OrExpression.operands+=current} 'or' operands+=UnitExpression ('or' operands+=UnitExpression)* |
	//	{AndExpression.operands+=current} 'and' operands+=UnitExpression ('and' operands+=UnitExpression)* |
	//	{ComparisonExpression.left=current} operator=ComparisonOperator right=UnitExpression)?;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//UnitExpression Expression:
	//	NegationExpression | UnitaryExpression;
	public UnitExpressionElements getUnitExpressionAccess() {
		return pUnitExpression;
	}
	
	public ParserRule getUnitExpressionRule() {
		return getUnitExpressionAccess().getRule();
	}
	
	//NegationExpression Expression:
	//	{NegationExpression} 'not' operand=UnitExpression;
	public NegationExpressionElements getNegationExpressionAccess() {
		return pNegationExpression;
	}
	
	public ParserRule getNegationExpressionRule() {
		return getNegationExpressionAccess().getRule();
	}
	
	//UnitaryExpression Expression:
	//	"(" Expression ")"
	//	| Term;
	public UnitaryExpressionElements getUnitaryExpressionAccess() {
		return pUnitaryExpression;
	}
	
	public ParserRule getUnitaryExpressionRule() {
		return getUnitaryExpressionAccess().getRule();
	}
	
	//Term:
	//	ExistentAttributeTerm | StoryAttributeTerm | IntegerTerm | BooleanTerm;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//ExistentAttributeTerm:
	//	existent=[Existent] '.' attribute=[Attribute];
	public ExistentAttributeTermElements getExistentAttributeTermAccess() {
		return pExistentAttributeTerm;
	}
	
	public ParserRule getExistentAttributeTermRule() {
		return getExistentAttributeTermAccess().getRule();
	}
	
	//StoryAttributeTerm:
	//	'Story' '.' attribute=[Attribute];
	public StoryAttributeTermElements getStoryAttributeTermAccess() {
		return pStoryAttributeTerm;
	}
	
	public ParserRule getStoryAttributeTermRule() {
		return getStoryAttributeTermAccess().getRule();
	}
	
	//IntegerTerm:
	//	value=INT;
	public IntegerTermElements getIntegerTermAccess() {
		return pIntegerTerm;
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}
	
	//BooleanTerm:
	//	value=('true' | 'false');
	public BooleanTermElements getBooleanTermAccess() {
		return pBooleanTerm;
	}
	
	public ParserRule getBooleanTermRule() {
		return getBooleanTermAccess().getRule();
	}
	
	//enum ActionType:
	//	VISUAL='visual' |
	//	INTERACTION='interaction' |
	//	MOVEMENT='movement' |
	//	COMMUNICATION='communication' |
	//	COMBAT='combat' |
	//	IDLE='idle';
	public ActionTypeElements getActionTypeAccess() {
		return eActionType;
	}
	
	public EnumRule getActionTypeRule() {
		return getActionTypeAccess().getRule();
	}
	
	//enum ComparisonOperator:
	//	LT="<" |
	//	LE="<=" |
	//	EQ="==" |
	//	NEQ="!=" |
	//	GE=">=" |
	//	GT=">";
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return eComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//enum AttributionOperator:
	//	ASSIGN='=' |
	//	INCREMENT='+=' |
	//	DECREMENT='-=';
	public AttributionOperatorElements getAttributionOperatorAccess() {
		return eAttributionOperator;
	}
	
	public EnumRule getAttributionOperatorRule() {
		return getAttributionOperatorAccess().getRule();
	}
	
	//enum Order:
	//	AFTER='after' |
	//	BEFORE='before';
	public OrderElements getOrderAccess() {
		return eOrder;
	}
	
	public EnumRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//enum AttributeSettingFrequency:
	//	EVERY_EVENT='every event' |
	//	EVERY_HAPPENING='every happening' |
	//	EVERY_ACTION='every action' |
	//	EVERY_PLAYER_ACTION='every player action';
	public AttributeSettingFrequencyElements getAttributeSettingFrequencyAccess() {
		return eAttributeSettingFrequency;
	}
	
	public EnumRule getAttributeSettingFrequencyRule() {
		return getAttributeSettingFrequencyAccess().getRule();
	}
	
	//enum EventPriority:
	//	NORMAL='normal' |
	//	HIGH='high' |
	//	VERY_HIGH='veryHigh';
	public EventPriorityElements getEventPriorityAccess() {
		return eEventPriority;
	}
	
	public EnumRule getEventPriorityRule() {
		return getEventPriorityAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
