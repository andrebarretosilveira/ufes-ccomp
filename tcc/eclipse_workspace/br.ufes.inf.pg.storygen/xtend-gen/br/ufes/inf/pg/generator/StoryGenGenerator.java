/**
 * generated by Xtext 2.17.0
 */
package br.ufes.inf.pg.generator;

import br.ufes.inf.pg.storyGen.ActionEvent;
import br.ufes.inf.pg.storyGen.Actor;
import br.ufes.inf.pg.storyGen.AndExpression;
import br.ufes.inf.pg.storyGen.Attribute;
import br.ufes.inf.pg.storyGen.AttributeSetting;
import br.ufes.inf.pg.storyGen.AttributeSettingFrequency;
import br.ufes.inf.pg.storyGen.AttributionOperator;
import br.ufes.inf.pg.storyGen.BooleanTerm;
import br.ufes.inf.pg.storyGen.Change;
import br.ufes.inf.pg.storyGen.ComparisonExpression;
import br.ufes.inf.pg.storyGen.ComparisonOperator;
import br.ufes.inf.pg.storyGen.Condition;
import br.ufes.inf.pg.storyGen.Event;
import br.ufes.inf.pg.storyGen.Existent;
import br.ufes.inf.pg.storyGen.ExistentAttributeTerm;
import br.ufes.inf.pg.storyGen.ExistentChange;
import br.ufes.inf.pg.storyGen.Expression;
import br.ufes.inf.pg.storyGen.ExpressionCondition;
import br.ufes.inf.pg.storyGen.FactAttribute;
import br.ufes.inf.pg.storyGen.HappeningEvent;
import br.ufes.inf.pg.storyGen.IntegerTerm;
import br.ufes.inf.pg.storyGen.NegationExpression;
import br.ufes.inf.pg.storyGen.OrExpression;
import br.ufes.inf.pg.storyGen.Order;
import br.ufes.inf.pg.storyGen.OrderCondition;
import br.ufes.inf.pg.storyGen.Plot;
import br.ufes.inf.pg.storyGen.QuantityAttribute;
import br.ufes.inf.pg.storyGen.Space;
import br.ufes.inf.pg.storyGen.Story;
import br.ufes.inf.pg.storyGen.StoryAttributeTerm;
import br.ufes.inf.pg.storyGen.StoryData;
import br.ufes.inf.pg.storyGen.StoryDataChange;
import br.ufes.inf.pg.storyGen.TriggerCondition;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class StoryGenGenerator extends AbstractGenerator {
  /**
   * C# Keywords
   */
  public static class CSkeys {
    private static String parOpen = "(";
    
    private static String parClose = ")";
    
    private static String and = " && ";
    
    private static String or = " || ";
    
    private static String not = "!";
  }
  
  private Plot plot;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Story> _filter = Iterables.<Story>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Story.class);
    for (final Story s : _filter) {
      fsa.generateFile("StoryManager.cs", this.convertStory(s));
    }
  }
  
  /**
   * STORY GENERATOR GENERATION
   */
  public CharSequence convertStory(final Story s) {
    CharSequence _xblockexpression = null;
    {
      this.plot = s.getPlot();
      EList<Attribute> allAttributes = new BasicEList<Attribute>();
      allAttributes.addAll(s.getData().getAttributes());
      EList<Existent> _existents = s.getSpace().getExistents();
      for (final Existent existent : _existents) {
        allAttributes.addAll(existent.getAttributes());
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("using System;");
      _builder.newLine();
      _builder.append("using System.Collections.Generic;");
      _builder.newLine();
      _builder.append("using System.Linq;");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("namespace StoryManager");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static class Story");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static Space space;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public static Plot plot;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("private static Selector selector;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      {
        EList<Attribute> _attributes = s.getData().getAttributes();
        for(final Attribute attribute : _attributes) {
          _builder.append("\t\t");
          CharSequence _convertAttribute = this.convertAttribute(attribute, true);
          _builder.append(_convertAttribute, "\t\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t");
      _builder.append("public static bool __isOver;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static List<Plot.Event> pastEvents;");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static void Init()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("plot = new Plot();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("space = new Space();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("selector = new Selector();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("plot.SetEventsRefs();");
      _builder.newLine();
      _builder.newLine();
      {
        EList<Attribute> _attributes_1 = s.getData().getAttributes();
        for(final Attribute attribute_1 : _attributes_1) {
          {
            if ((attribute_1 instanceof QuantityAttribute)) {
              _builder.append("\t\t\t");
              final QuantityAttribute qa = ((QuantityAttribute) attribute_1);
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t");
              String _name = qa.getName();
              _builder.append(_name, "\t\t\t");
              _builder.append(" = ");
              CharSequence _convertExpression = this.convertExpression(qa.getInitValue());
              _builder.append(_convertExpression, "\t\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t\t\t");
              final FactAttribute fa = ((FactAttribute) attribute_1);
              _builder.newLineIfNotEmpty();
              {
                BooleanTerm _initValue = fa.getInitValue();
                boolean _tripleNotEquals = (_initValue != null);
                if (_tripleNotEquals) {
                  _builder.append("\t\t\t");
                  String _name_1 = fa.getName();
                  _builder.append(_name_1, "\t\t\t");
                  _builder.append(" = ");
                  CharSequence _convertExpression_1 = this.convertExpression(fa.getInitValue());
                  _builder.append(_convertExpression_1, "\t\t\t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
      _builder.append("\t\t\t");
      _builder.append("__isOver = false;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pastEvents = new List<Plot.Event>();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static List<Plot.Event> Begin()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("return selector.ApplyOpening();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static List<Plot.Event> Tick(Plot.Event playerAction)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("return selector.ApplyNext(playerAction);;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static IDictionary<string, string> GetAttributes()");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var attrs = new Dictionary<string, string>();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      {
        EList<Attribute> _attributes_2 = s.getData().getAttributes();
        for(final Attribute attr : _attributes_2) {
          _builder.append("\t\t\t");
          _builder.append("attrs.Add(\"");
          String _firstUpper = StringExtensions.toFirstUpper(attr.getName());
          _builder.append(_firstUpper, "\t\t\t");
          _builder.append("\", ");
          String _firstUpper_1 = StringExtensions.toFirstUpper(attr.getName());
          _builder.append(_firstUpper_1, "\t\t\t");
          _builder.append(" + \"\");");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return attrs;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static List<Plot.ActionEvent> GetPossiblePlayerActions()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("if(Story.__isOver) return new List<Plot.ActionEvent>();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("else return space.player.GetPossibleActions();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public static bool HasEventOcurred(Plot.Event consideredEvent)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("return pastEvents.Any(e => e.Equals(consideredEvent));");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("//-----");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("#region Story Selector");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public class Selector");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("Random random;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("//");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("// Constructor");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("public Selector()");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("random = new Random();");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("public List<Plot.Event> ApplyOpening()");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("return ApplyEventChanges(plot.opening);");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("public List<Plot.Event> ApplyNext(Plot.Event playerAction)");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("List<Plot.Event> eventsApplied = new List<Plot.Event>();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("if (playerAction != null)");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("eventsApplied.AddRange(ApplyEventChanges(playerAction));");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("if(Story.__isOver) return eventsApplied;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("var actionsToApply = CheckForOtherActorsActions();");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("foreach (var action in actionsToApply)");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("if(Story.__isOver) return eventsApplied;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("if(!action.PreconditionsMet()) continue;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("eventsApplied.AddRange(ApplyEventChanges(action));");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("var happeningsToApply = CheckForHappenings();");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("foreach (var happening in happeningsToApply)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("if(Story.__isOver) return eventsApplied;");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("if(!happening.PreconditionsMet()) continue;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("eventsApplied.AddRange(ApplyEventChanges(happening));");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("                ");
      _builder.append("return eventsApplied;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      final Function1<QuantityAttribute, Boolean> _function = (QuantityAttribute a) -> {
        AttributeSetting _setting = a.getSetting();
        return Boolean.valueOf((_setting != null));
      };
      final Iterable<QuantityAttribute> quantityAttributes = IterableExtensions.<QuantityAttribute>filter(Iterables.<QuantityAttribute>filter(allAttributes, QuantityAttribute.class), _function);
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      final Function1<QuantityAttribute, Boolean> _function_1 = (QuantityAttribute a) -> {
        AttributeSettingFrequency _frequency = a.getSetting().getFrequency();
        return Boolean.valueOf(Objects.equal(_frequency, AttributeSettingFrequency.EVERY_EVENT));
      };
      final Iterable<QuantityAttribute> everyEventAttrs = IterableExtensions.<QuantityAttribute>filter(quantityAttributes, _function_1);
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      final Function1<QuantityAttribute, Boolean> _function_2 = (QuantityAttribute a) -> {
        AttributeSettingFrequency _frequency = a.getSetting().getFrequency();
        return Boolean.valueOf(Objects.equal(_frequency, AttributeSettingFrequency.EVERY_HAPPENING));
      };
      final Iterable<QuantityAttribute> everyHappeningAttrs = IterableExtensions.<QuantityAttribute>filter(quantityAttributes, _function_2);
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      final Function1<QuantityAttribute, Boolean> _function_3 = (QuantityAttribute a) -> {
        AttributeSettingFrequency _frequency = a.getSetting().getFrequency();
        return Boolean.valueOf(Objects.equal(_frequency, AttributeSettingFrequency.EVERY_ACTION));
      };
      final Iterable<QuantityAttribute> everyActionAttrs = IterableExtensions.<QuantityAttribute>filter(quantityAttributes, _function_3);
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      final Function1<QuantityAttribute, Boolean> _function_4 = (QuantityAttribute a) -> {
        AttributeSettingFrequency _frequency = a.getSetting().getFrequency();
        return Boolean.valueOf(Objects.equal(_frequency, AttributeSettingFrequency.EVERY_PLAYER_ACTION));
      };
      final Iterable<QuantityAttribute> everyPlayerActionAttrs = IterableExtensions.<QuantityAttribute>filter(quantityAttributes, _function_4);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("private List<Plot.Event> ApplyEventChanges(Plot.Event er)");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("List<Plot.Event> appliedEvents = new List<Plot.Event>();");
      _builder.newLine();
      _builder.append("                ");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("er.ApplyChanges();");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("Story.pastEvents.Add(er);");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("appliedEvents.Add(er);");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("// Increments every event");
      _builder.newLine();
      {
        for(final QuantityAttribute a : everyEventAttrs) {
          _builder.append("\t\t\t\t");
          {
            EObject _eContainer = a.eContainer();
            if ((_eContainer instanceof StoryData)) {
              _builder.append("Story");
            } else {
              _builder.append("space.");
              EObject _eContainer_1 = a.eContainer();
              String _firstLower = StringExtensions.toFirstLower(((Existent) _eContainer_1).getName());
              _builder.append(_firstLower, "\t\t\t\t");
            }
          }
          _builder.append(".");
          String _firstUpper_2 = StringExtensions.toFirstUpper(a.getName());
          _builder.append(_firstUpper_2, "\t\t\t\t");
          _builder.append(" ");
          {
            boolean _isPositive = a.getSetting().isPositive();
            if (_isPositive) {
              _builder.append("+=");
            } else {
              _builder.append("-=");
            }
          }
          _builder.append(" ");
          int _amount = a.getSetting().getAmount();
          _builder.append(_amount, "\t\t\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(er is Plot.HappeningEvent)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("// Increments every happening event");
      _builder.newLine();
      {
        for(final QuantityAttribute a_1 : everyHappeningAttrs) {
          _builder.append("\t\t\t\t\t");
          {
            EObject _eContainer_2 = a_1.eContainer();
            if ((_eContainer_2 instanceof StoryData)) {
              _builder.append("Story");
            } else {
              _builder.append("space.");
              EObject _eContainer_3 = a_1.eContainer();
              String _firstLower_1 = StringExtensions.toFirstLower(((Existent) _eContainer_3).getName());
              _builder.append(_firstLower_1, "\t\t\t\t\t");
            }
          }
          _builder.append(".");
          String _firstUpper_3 = StringExtensions.toFirstUpper(a_1.getName());
          _builder.append(_firstUpper_3, "\t\t\t\t\t");
          _builder.append(" ");
          {
            boolean _isPositive_1 = a_1.getSetting().isPositive();
            if (_isPositive_1) {
              _builder.append("+=");
            } else {
              _builder.append("-=");
            }
          }
          _builder.append(" ");
          int _amount_1 = a_1.getSetting().getAmount();
          _builder.append(_amount_1, "\t\t\t\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("else if(er is Plot.ActionEvent)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("// Increments every action event");
      _builder.newLine();
      {
        for(final QuantityAttribute a_2 : everyActionAttrs) {
          _builder.append("\t\t\t\t\t");
          {
            EObject _eContainer_4 = a_2.eContainer();
            if ((_eContainer_4 instanceof StoryData)) {
              _builder.append("Story");
            } else {
              _builder.append("space.");
              EObject _eContainer_5 = a_2.eContainer();
              String _firstLower_2 = StringExtensions.toFirstLower(((Existent) _eContainer_5).getName());
              _builder.append(_firstLower_2, "\t\t\t\t\t");
            }
          }
          _builder.append(".");
          String _firstUpper_4 = StringExtensions.toFirstUpper(a_2.getName());
          _builder.append(_firstUpper_4, "\t\t\t\t\t");
          _builder.append(" ");
          {
            boolean _isPositive_2 = a_2.getSetting().isPositive();
            if (_isPositive_2) {
              _builder.append("+=");
            } else {
              _builder.append("-=");
            }
          }
          _builder.append(" ");
          int _amount_2 = a_2.getSetting().getAmount();
          _builder.append(_amount_2, "\t\t\t\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("if(Story.space.player.actions.Contains(er))");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("// Increments every player action event");
      _builder.newLine();
      {
        for(final QuantityAttribute a_3 : everyPlayerActionAttrs) {
          _builder.append("\t\t\t\t\t\t");
          {
            EObject _eContainer_6 = a_3.eContainer();
            if ((_eContainer_6 instanceof StoryData)) {
              _builder.append("Story");
            } else {
              _builder.append("space.");
              EObject _eContainer_7 = a_3.eContainer();
              String _firstLower_3 = StringExtensions.toFirstLower(((Existent) _eContainer_7).getName());
              _builder.append(_firstLower_3, "\t\t\t\t\t\t");
            }
          }
          _builder.append(".");
          String _firstUpper_5 = StringExtensions.toFirstUpper(a_3.getName());
          _builder.append(_firstUpper_5, "\t\t\t\t\t\t");
          _builder.append(" ");
          {
            boolean _isPositive_3 = a_3.getSetting().isPositive();
            if (_isPositive_3) {
              _builder.append("+=");
            } else {
              _builder.append("-=");
            }
          }
          _builder.append(" ");
          int _amount_3 = a_3.getSetting().getAmount();
          _builder.append(_amount_3, "\t\t\t\t\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("if(Story.plot.IsEnding(er)) ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Story.__isOver = true;");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("return appliedEvents;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(er.eventToTrigger != null)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("appliedEvents.AddRange(ApplyEventChanges(er.eventToTrigger));");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(er.eventsThatMayTrigger != null)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("var possibleTriggers = er.eventsThatMayTrigger.Where(t => t.PreconditionsMet(true));");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("var triggers = ResolveEventsToHappen(possibleTriggers.ToList());");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("foreach(var trigger in triggers)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("appliedEvents.AddRange(ApplyEventChanges(trigger));");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("return appliedEvents;");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("public List<Plot.Event> CheckForHappenings()");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("return ResolveEventsToHappen(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("plot.GetPossibleHappenings()");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append(".Select(a => (Plot.Event) a).ToList()");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append(");");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("public List<Plot.Event> CheckForOtherActorsActions()");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("var actors = space.actors;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("List<Plot.Event> actionsToHappen = new List<Plot.Event>();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("foreach (var actor in actors)");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("actionsToHappen.AddRange(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("ResolveEventsToHappen(actor.GetPossibleActions()");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(".Select(a => (Plot.Event) a).ToList())");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append(");");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("return actionsToHappen;");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("private List<Plot.Event> ResolveEventsToHappen(List<Plot.Event> candidateEvents)");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("List<Plot.Event> eventsToHappen = new List<Plot.Event>();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("var highPriorEvents = candidateEvents.Where(e => e.priority == EventPriority.High).ToList();");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("var veryHighPriorEvents = highPriorEvents.Where(e => e.priority == EventPriority.VeryHigh).ToList();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(veryHighPriorEvents.Count > 0)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("// One or more veryhigh events");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("eventsToHappen.AddRange(veryHighPriorEvents);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("else if(highPriorEvents.Count > 0)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("// One or more high events");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("eventsToHappen.AddRange(highPriorEvents);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("else if (candidateEvents.Count > 0)");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("// One random normal event");
      _builder.newLine();
      _builder.append("\t                ");
      _builder.append("int r = random.Next(0, candidateEvents.Count);");
      _builder.newLine();
      _builder.append("\t                ");
      _builder.append("eventsToHappen.Add(candidateEvents[r]);");
      _builder.newLine();
      _builder.append("\t            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("return eventsToHappen;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("#endregion");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _convert = this.convert(s.getPlot());
      _builder.append(_convert, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _convert_1 = this.convert(s.getSpace());
      _builder.append(_convert_1, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public enum ActionType");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Idle,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Visual,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Interaction,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Movement,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Communication,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Combat,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public enum EventPriority");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Normal,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("High,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("VeryHigh");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  /**
   * PLOT & Events
   */
  public CharSequence convert(final Plot plot) {
    CharSequence _xblockexpression = null;
    {
      final Iterable<HappeningEvent> happenings = Iterables.<HappeningEvent>filter(plot.getEvents(), HappeningEvent.class);
      final Iterable<ActionEvent> actions = Iterables.<ActionEvent>filter(plot.getEvents(), ActionEvent.class);
      final Function1<HappeningEvent, Boolean> _function = (HappeningEvent e) -> {
        return Boolean.valueOf(e.isOpening());
      };
      final HappeningEvent opening = IterableExtensions.<HappeningEvent>findFirst(happenings, _function);
      final Function1<HappeningEvent, Boolean> _function_1 = (HappeningEvent e) -> {
        return Boolean.valueOf(e.isEnding());
      };
      final Iterable<HappeningEvent> endings = IterableExtensions.<HappeningEvent>filter(happenings, _function_1);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public class Plot");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("// Plot opening & endings");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public HappeningEvent opening;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<HappeningEvent> endings;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("// Happenings");
      _builder.newLine();
      {
        for(final HappeningEvent h : happenings) {
          _builder.append("\t");
          _builder.append("public HappeningEvent ");
          String _firstLower = StringExtensions.toFirstLower(h.getName());
          _builder.append(_firstLower, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t");
      _builder.append("// Actions");
      _builder.newLine();
      {
        for(final ActionEvent a : actions) {
          _builder.append("\t");
          _builder.append("public ActionEvent ");
          String _firstLower_1 = StringExtensions.toFirstLower(a.getActor().getName());
          _builder.append(_firstLower_1, "\t");
          String _firstUpper = StringExtensions.toFirstUpper(a.getName());
          _builder.append(_firstUpper, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t");
      _builder.append("// Collections of Events");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<Event> events;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<HappeningEvent> happenings;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<ActionEvent> actions;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Plot()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      {
        for(final HappeningEvent h_1 : happenings) {
          _builder.append("\t\t");
          String _firstLower_2 = StringExtensions.toFirstLower(h_1.getName());
          _builder.append(_firstLower_2, "\t\t");
          _builder.append(" = new ");
          String _firstUpper_1 = StringExtensions.toFirstUpper(h_1.getName());
          _builder.append(_firstUpper_1, "\t\t");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      {
        for(final ActionEvent a_1 : actions) {
          _builder.append("\t\t");
          String _firstLower_3 = StringExtensions.toFirstLower(a_1.getActor().getName());
          _builder.append(_firstLower_3, "\t\t");
          String _firstUpper_2 = StringExtensions.toFirstUpper(a_1.getName());
          _builder.append(_firstUpper_2, "\t\t");
          _builder.append(" = new ");
          String _firstUpper_3 = StringExtensions.toFirstUpper(a_1.getActor().getName());
          _builder.append(_firstUpper_3, "\t\t");
          String _firstUpper_4 = StringExtensions.toFirstUpper(a_1.getName());
          _builder.append(_firstUpper_4, "\t\t");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("opening = ");
      String _firstLower_4 = StringExtensions.toFirstLower(opening.getName());
      _builder.append(_firstLower_4, "\t\t");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("endings = new List<HappeningEvent>() { ");
      {
        for(final HappeningEvent end : endings) {
          String _firstLower_5 = StringExtensions.toFirstLower(end.getName());
          _builder.append(_firstLower_5, "\t\t");
          _builder.append(", ");
        }
      }
      _builder.append(" };");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("happenings = new List<HappeningEvent>() { ");
      {
        final Function1<HappeningEvent, Boolean> _function_2 = (HappeningEvent h_2) -> {
          boolean _isOpening = h_2.isOpening();
          return Boolean.valueOf((!_isOpening));
        };
        Iterable<HappeningEvent> _filter = IterableExtensions.<HappeningEvent>filter(happenings, _function_2);
        for(final HappeningEvent h_2 : _filter) {
          String _firstLower_6 = StringExtensions.toFirstLower(h_2.getName());
          _builder.append(_firstLower_6, "\t\t");
          _builder.append(", ");
        }
      }
      _builder.append(" };");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("actions = new List<ActionEvent>() { ");
      {
        for(final ActionEvent a_2 : actions) {
          String _firstLower_7 = StringExtensions.toFirstLower(a_2.getActor().getName());
          _builder.append(_firstLower_7, "\t\t");
          String _firstUpper_5 = StringExtensions.toFirstUpper(a_2.getName());
          _builder.append(_firstUpper_5, "\t\t");
          _builder.append(", ");
        }
      }
      _builder.append(" };");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events = new List<Event>() { opening };");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events.AddRange(happenings);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events.AddRange(actions);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("events.AddRange(endings);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void SetEventsRefs()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("foreach (var e in events)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("e.SetReferences();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<HappeningEvent> GetPossibleHappenings()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return happenings.Where(e => e.PreconditionsMet()).ToList();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public bool IsEnding(Event e)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(e is ActionEvent) return false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return endings.Contains(e as HappeningEvent);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//-----");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("#region Event Definitions");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public abstract class Event");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public string name;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public string description;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public string shortDescription;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public EventPriority priority;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public Plot.Event eventToTrigger;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public List<Plot.Event> eventsThatMayTrigger;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public abstract bool PreconditionsMet(bool isTriggerCheck = false);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public abstract void ApplyChanges();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public abstract void SetReferences();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("   \t\t");
      _builder.append("// override object.Equals");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public override bool Equals(object obj)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("if (obj == null || GetType() != obj.GetType())");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("return false;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("return (obj as Event).name == this.name;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("// override object.GetHashCode");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public override int GetHashCode()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("return base.GetHashCode();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("//-----");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#region Happenings");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public abstract class HappeningEvent : Event");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      {
        for(final HappeningEvent h_3 : happenings) {
          _builder.append("    ");
          CharSequence _convert = this.convert(h_3);
          _builder.append(_convert, "    ");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#endregion");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("//-----");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#region Actions");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public abstract class ActionEvent : Event");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("public ActionType type;");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("public Space.StoryActor actor;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      {
        for(final ActionEvent a_3 : actions) {
          _builder.append("    ");
          CharSequence _convert_1 = this.convert(a_3);
          _builder.append(_convert_1, "    ");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#endregion");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#endregion");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence convert(final HappeningEvent he) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(he.getName());
    _builder.append(_firstUpper);
    _builder.append(" : HappeningEvent");
    _builder.newLineIfNotEmpty();
    _builder.append("{\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _firstUpper_1 = StringExtensions.toFirstUpper(he.getName());
    _builder.append(_firstUpper_1, "\t");
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("name = \"");
    String _firstUpper_2 = StringExtensions.toFirstUpper(he.getName());
    _builder.append(_firstUpper_2, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("description = \"");
    String _description = he.getDescription();
    _builder.append(_description, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("shortDescription = \"");
    {
      String _shortDescription = he.getShortDescription();
      boolean _tripleNotEquals = (_shortDescription != null);
      if (_tripleNotEquals) {
        String _shortDescription_1 = he.getShortDescription();
        _builder.append(_shortDescription_1, "\t\t");
      }
    }
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("priority = EventPriority.");
    String _firstUpper_3 = StringExtensions.toFirstUpper(he.getPriority().getLiteral());
    _builder.append(_firstUpper_3, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public override void SetReferences()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eventToTrigger = ");
    {
      Event _trigger = he.getTrigger();
      boolean _tripleNotEquals_1 = (_trigger != null);
      if (_tripleNotEquals_1) {
        {
          Event _trigger_1 = he.getTrigger();
          if ((_trigger_1 instanceof ActionEvent)) {
            _builder.append("Story.plot.");
            Event _trigger_2 = he.getTrigger();
            String _firstLower = StringExtensions.toFirstLower(((ActionEvent) _trigger_2).getActor().getName());
            _builder.append(_firstLower, "\t\t");
            String _firstUpper_4 = StringExtensions.toFirstUpper(he.getTrigger().getName());
            _builder.append(_firstUpper_4, "\t\t");
          } else {
            _builder.append("Story.plot.");
            String _firstLower_1 = StringExtensions.toFirstLower(he.getTrigger().getName());
            _builder.append(_firstLower_1, "\t\t");
          }
        }
      } else {
        _builder.append("null");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      if (((he.getMayTriggers() == null) || (((Object[])Conversions.unwrapArray(he.getMayTriggers(), Object.class)).length == 0))) {
        _builder.append("\t\t");
        _builder.append("eventsThatMayTrigger = null;");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("eventsThatMayTrigger = new List<Plot.Event>() { ");
        {
          EList<Event> _mayTriggers = he.getMayTriggers();
          for(final Event e : _mayTriggers) {
            {
              if ((e instanceof ActionEvent)) {
                _builder.append("Story.plot.");
                String _firstLower_2 = StringExtensions.toFirstLower(((ActionEvent) e).getActor().getName());
                _builder.append(_firstLower_2, "\t\t");
                String _firstUpper_5 = StringExtensions.toFirstUpper(((ActionEvent)e).getName());
                _builder.append(_firstUpper_5, "\t\t");
              } else {
                _builder.append("Story.plot.");
                String _firstLower_3 = StringExtensions.toFirstLower(e.getName());
                _builder.append(_firstLower_3, "\t\t");
              }
            }
            _builder.append(", ");
          }
        }
        _builder.append(" };");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public override bool PreconditionsMet(bool isTriggerCheck = false)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    {
      final Function1<Condition, Boolean> _function = (Condition c) -> {
        return Boolean.valueOf((c instanceof TriggerCondition));
      };
      boolean _exists = IterableExtensions.<Condition>exists(he.getConditions(), _function);
      if (_exists) {
        _builder.append("if(!isTriggerCheck) return false;");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return (");
    {
      EList<Condition> _conditions = he.getConditions();
      for(final Condition c : _conditions) {
        _builder.append("(");
        CharSequence _convertCondition = this.convertCondition(c);
        _builder.append(_convertCondition, "\t\t");
        _builder.append(") && ");
      }
    }
    _builder.append(" true);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public override void ApplyChanges()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    {
      EList<Change> _changes = he.getChanges();
      for(final Change c_1 : _changes) {
        _builder.append("\t\t");
        CharSequence _convertChange = this.convertChange(c_1);
        _builder.append(_convertChange, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence convert(final ActionEvent ae) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(ae.getActor().getName());
    _builder.append(_firstUpper);
    String _firstUpper_1 = StringExtensions.toFirstUpper(ae.getName());
    _builder.append(_firstUpper_1);
    _builder.append(" : ActionEvent");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _firstUpper_2 = StringExtensions.toFirstUpper(ae.getActor().getName());
    _builder.append(_firstUpper_2, "\t");
    String _firstUpper_3 = StringExtensions.toFirstUpper(ae.getName());
    _builder.append(_firstUpper_3, "\t");
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("name = \"");
    String _firstUpper_4 = StringExtensions.toFirstUpper(ae.getName());
    _builder.append(_firstUpper_4, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("description = \"");
    String _description = ae.getDescription();
    _builder.append(_description, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("shortDescription = \"");
    {
      String _shortDescription = ae.getShortDescription();
      boolean _tripleNotEquals = (_shortDescription != null);
      if (_tripleNotEquals) {
        String _shortDescription_1 = ae.getShortDescription();
        _builder.append(_shortDescription_1, "\t\t");
      }
    }
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("priority = EventPriority.");
    String _firstUpper_5 = StringExtensions.toFirstUpper(ae.getPriority().getLiteral());
    _builder.append(_firstUpper_5, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("type = ActionType.");
    String _firstUpper_6 = StringExtensions.toFirstUpper(ae.getType().getLiteral());
    _builder.append(_firstUpper_6, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public override void SetReferences()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actor = Story.space.");
    String _firstLower = StringExtensions.toFirstLower(ae.getActor().getName());
    _builder.append(_firstLower, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eventToTrigger = ");
    {
      Event _trigger = ae.getTrigger();
      boolean _tripleNotEquals_1 = (_trigger != null);
      if (_tripleNotEquals_1) {
        {
          Event _trigger_1 = ae.getTrigger();
          if ((_trigger_1 instanceof ActionEvent)) {
            _builder.append("Story.plot.");
            Event _trigger_2 = ae.getTrigger();
            String _firstLower_1 = StringExtensions.toFirstLower(((ActionEvent) _trigger_2).getActor().getName());
            _builder.append(_firstLower_1, "\t\t");
            String _firstUpper_7 = StringExtensions.toFirstUpper(ae.getTrigger().getName());
            _builder.append(_firstUpper_7, "\t\t");
          } else {
            _builder.append("Story.plot.");
            String _firstLower_2 = StringExtensions.toFirstLower(ae.getTrigger().getName());
            _builder.append(_firstLower_2, "\t\t");
          }
        }
      } else {
        _builder.append("null");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      if (((ae.getMayTriggers() == null) || (((Object[])Conversions.unwrapArray(ae.getMayTriggers(), Object.class)).length == 0))) {
        _builder.append("\t\t");
        _builder.append("eventsThatMayTrigger = null;");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("eventsThatMayTrigger = new List<Plot.Event>() { ");
        {
          EList<Event> _mayTriggers = ae.getMayTriggers();
          for(final Event mt : _mayTriggers) {
            {
              if ((mt instanceof ActionEvent)) {
                _builder.append("Story.plot.");
                String _firstLower_3 = StringExtensions.toFirstLower(((ActionEvent) mt).getActor().getName());
                _builder.append(_firstLower_3, "\t\t");
                String _firstUpper_8 = StringExtensions.toFirstUpper(((ActionEvent)mt).getName());
                _builder.append(_firstUpper_8, "\t\t");
              } else {
                _builder.append("Story.plot.");
                String _firstLower_4 = StringExtensions.toFirstLower(mt.getName());
                _builder.append(_firstLower_4, "\t\t");
              }
            }
            _builder.append(", ");
          }
        }
        _builder.append(" };");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public override bool PreconditionsMet(bool isTriggerCheck = false)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    {
      final Function1<Condition, Boolean> _function = (Condition c) -> {
        return Boolean.valueOf((c instanceof TriggerCondition));
      };
      boolean _exists = IterableExtensions.<Condition>exists(ae.getConditions(), _function);
      if (_exists) {
        _builder.append("if(!isTriggerCheck) return false;");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return (");
    {
      EList<Condition> _conditions = ae.getConditions();
      for(final Condition c : _conditions) {
        _builder.append("(");
        CharSequence _convertCondition = this.convertCondition(c);
        _builder.append(_convertCondition, "\t\t");
        _builder.append(") && ");
      }
    }
    _builder.append(" true);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public override void ApplyChanges()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    {
      EList<Change> _changes = ae.getChanges();
      for(final Change c_1 : _changes) {
        _builder.append("\t\t");
        CharSequence _convertChange = this.convertChange(c_1);
        _builder.append(_convertChange, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * SPACE & Existents
   */
  public CharSequence convert(final Space space) {
    CharSequence _xblockexpression = null;
    {
      final Iterable<Actor> actors = Iterables.<Actor>filter(space.getExistents(), Actor.class);
      final Iterable<br.ufes.inf.pg.storyGen.Object> objects = Iterables.<br.ufes.inf.pg.storyGen.Object>filter(space.getExistents(), br.ufes.inf.pg.storyGen.Object.class);
      final Function1<Actor, Boolean> _function = (Actor a) -> {
        return Boolean.valueOf(a.isPlayable());
      };
      final Actor player = IterableExtensions.<Actor>findFirst(actors, _function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public class Space");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("// Player");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      String _firstUpper = StringExtensions.toFirstUpper(player.getName());
      _builder.append(_firstUpper, "\t");
      _builder.append(" player;");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Actors");
      _builder.newLine();
      {
        for(final Actor a : actors) {
          _builder.append("    ");
          _builder.append("public ");
          String _firstUpper_1 = StringExtensions.toFirstUpper(a.getName());
          _builder.append(_firstUpper_1, "    ");
          _builder.append(" ");
          String _firstLower = StringExtensions.toFirstLower(a.getName());
          _builder.append(_firstLower, "    ");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Objects");
      _builder.newLine();
      {
        for(final br.ufes.inf.pg.storyGen.Object o : objects) {
          _builder.append("    ");
          _builder.append("public ");
          String _firstUpper_2 = StringExtensions.toFirstUpper(o.getName());
          _builder.append(_firstUpper_2, "    ");
          _builder.append(" ");
          String _firstLower_1 = StringExtensions.toFirstLower(o.getName());
          _builder.append(_firstLower_1, "    ");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Collections of Existents");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public List<StoryExistent> existents;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public List<StoryActor> actors;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public List<StoryObject> objects;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Space()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      {
        for(final Actor a_1 : actors) {
          _builder.append("\t    ");
          String _firstLower_2 = StringExtensions.toFirstLower(a_1.getName());
          _builder.append(_firstLower_2, "\t    ");
          _builder.append(" = new ");
          String _firstUpper_3 = StringExtensions.toFirstUpper(a_1.getName());
          _builder.append(_firstUpper_3, "\t    ");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      {
        for(final br.ufes.inf.pg.storyGen.Object o_1 : objects) {
          _builder.append("\t    ");
          String _firstLower_3 = StringExtensions.toFirstLower(o_1.getName());
          _builder.append(_firstLower_3, "\t    ");
          _builder.append(" = new ");
          String _firstUpper_4 = StringExtensions.toFirstUpper(o_1.getName());
          _builder.append(_firstUpper_4, "\t    ");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("player = ");
      String _firstLower_4 = StringExtensions.toFirstLower(player.getName());
      _builder.append(_firstLower_4, "\t    ");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("existents = new List<StoryExistent>() { ");
      {
        EList<Existent> _existents = space.getExistents();
        for(final Existent e : _existents) {
          String _firstLower_5 = StringExtensions.toFirstLower(e.getName());
          _builder.append(_firstLower_5, "\t    ");
          _builder.append(", ");
        }
      }
      _builder.append(" };");
      _builder.newLineIfNotEmpty();
      _builder.append("\t    ");
      _builder.append("actors = new List<StoryActor>() { ");
      {
        final Function1<Actor, Boolean> _function_1 = (Actor a_2) -> {
          boolean _isPlayable = a_2.isPlayable();
          return Boolean.valueOf((!_isPlayable));
        };
        Iterable<Actor> _filter = IterableExtensions.<Actor>filter(actors, _function_1);
        for(final Actor a_2 : _filter) {
          String _firstLower_6 = StringExtensions.toFirstLower(a_2.getName());
          _builder.append(_firstLower_6, "\t    ");
          _builder.append(", ");
        }
      }
      _builder.append(" };");
      _builder.newLineIfNotEmpty();
      _builder.append("\t    ");
      _builder.append("objects = new List<StoryObject>() { ");
      {
        for(final br.ufes.inf.pg.storyGen.Object o_2 : objects) {
          String _firstLower_7 = StringExtensions.toFirstLower(o_2.getName());
          _builder.append(_firstLower_7, "\t    ");
          _builder.append(", ");
        }
      }
      _builder.append(" };");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("//-----");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#region Existent Definitions");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public abstract class StoryExistent");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("public abstract IDictionary<string, string> GetAttributes();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("//-----");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#region Actors");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public abstract class StoryActor : StoryExistent");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("public string displayName;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public List<Plot.ActionEvent> actions;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public List<Plot.ActionEvent> GetPossibleActions()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("return actions.Where(a => a.PreconditionsMet()).ToList();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      {
        for(final Actor a_3 : actors) {
          _builder.append("    ");
          CharSequence _convertExistent = this.convertExistent(a_3);
          _builder.append(_convertExistent, "    ");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#endregion");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("//-----");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#region Objects");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public abstract class StoryObject : StoryExistent");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      {
        for(final br.ufes.inf.pg.storyGen.Object o_3 : objects) {
          _builder.append("    ");
          CharSequence _convertExistent_1 = this.convertExistent(o_3);
          _builder.append(_convertExistent_1, "    ");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#endregion");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("#endregion");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _convertExistent(final Actor actor) {
    CharSequence _xblockexpression = null;
    {
      final Function1<ActionEvent, Boolean> _function = (ActionEvent a) -> {
        return Boolean.valueOf(a.getActor().equals(actor));
      };
      final Iterable<ActionEvent> actions = IterableExtensions.<ActionEvent>filter(Iterables.<ActionEvent>filter(this.plot.getEvents(), ActionEvent.class), _function);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public class ");
      String _firstUpper = StringExtensions.toFirstUpper(actor.getName());
      _builder.append(_firstUpper);
      _builder.append(" : StoryActor");
      _builder.newLineIfNotEmpty();
      _builder.append("{   \t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      String _firstUpper_1 = StringExtensions.toFirstUpper(actor.getName());
      _builder.append(_firstUpper_1, "\t");
      _builder.append("()");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("displayName = \"");
      String _displayName = actor.getDisplayName();
      _builder.append(_displayName, "\t\t");
      _builder.append("\";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("actions = new List<Plot.ActionEvent>() { ");
      {
        for(final ActionEvent a : actions) {
          _builder.append("Story.plot.");
          String _firstLower = StringExtensions.toFirstLower(a.getActor().getName());
          _builder.append(_firstLower, "\t\t");
          String _firstUpper_2 = StringExtensions.toFirstUpper(a.getName());
          _builder.append(_firstUpper_2, "\t\t");
          _builder.append(", ");
        }
      }
      _builder.append(" };");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public override IDictionary<string, string> GetAttributes()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var attrs = new Dictionary<string, string>();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      {
        EList<Attribute> _attributes = actor.getAttributes();
        for(final Attribute attr : _attributes) {
          _builder.append("\t\t");
          _builder.append("attrs.Add(\"");
          String _firstUpper_3 = StringExtensions.toFirstUpper(attr.getName());
          _builder.append(_firstUpper_3, "\t\t");
          _builder.append("\", ");
          String _firstUpper_4 = StringExtensions.toFirstUpper(attr.getName());
          _builder.append(_firstUpper_4, "\t\t");
          _builder.append(" + \"\");");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return attrs;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      {
        EList<Attribute> _attributes_1 = actor.getAttributes();
        for(final Attribute attr_1 : _attributes_1) {
          _builder.append("    \t");
          CharSequence _convertAttribute = this.convertAttribute(attr_1, false);
          _builder.append(_convertAttribute, "    \t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _convertExistent(final br.ufes.inf.pg.storyGen.Object object) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(object.getName());
    _builder.append(_firstUpper);
    _builder.append(" : StoryObject");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public override IDictionary<string, string> GetAttributes()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var attrs = new Dictionary<string, string>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Attribute> _attributes = object.getAttributes();
      for(final Attribute attr : _attributes) {
        _builder.append("\t\t");
        _builder.append("attrs.Add(\"");
        String _firstUpper_1 = StringExtensions.toFirstUpper(attr.getName());
        _builder.append(_firstUpper_1, "\t\t");
        _builder.append("\", ");
        String _firstUpper_2 = StringExtensions.toFirstUpper(attr.getName());
        _builder.append(_firstUpper_2, "\t\t");
        _builder.append(" + \"\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return attrs;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      EList<Attribute> _attributes_1 = object.getAttributes();
      for(final Attribute attr_1 : _attributes_1) {
        _builder.append("\t");
        CharSequence _convertAttribute = this.convertAttribute(attr_1, false);
        _builder.append(_convertAttribute, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _convertAttribute(final FactAttribute fa, final boolean isStatic) {
    StringConcatenation _builder = new StringConcatenation();
    {
      BooleanTerm _initValue = fa.getInitValue();
      boolean _tripleNotEquals = (_initValue != null);
      if (_tripleNotEquals) {
        _builder.append("private ");
        {
          if (isStatic) {
            _builder.append("static");
          }
        }
        _builder.append(" bool ");
        String _firstLower = StringExtensions.toFirstLower(fa.getName());
        _builder.append(_firstLower);
        _builder.append(" = ");
        String _value = fa.getInitValue().getValue();
        _builder.append(_value);
        _builder.append(";");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    {
      if (isStatic) {
        _builder.append("static");
      }
    }
    _builder.append(" bool ");
    String _firstUpper = StringExtensions.toFirstUpper(fa.getName());
    _builder.append(_firstUpper);
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    {
      Expression _macroExp = fa.getMacroExp();
      boolean _tripleNotEquals_1 = (_macroExp != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t");
        _builder.append("get { return ");
        CharSequence _convertExpression = this.convertExpression(fa.getMacroExp());
        _builder.append(_convertExpression, "\t");
        _builder.append("; }");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t");
        _builder.append("get { return ");
        String _firstLower_1 = StringExtensions.toFirstLower(fa.getName());
        _builder.append(_firstLower_1, "\t");
        _builder.append("; }");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("set { ");
        String _firstLower_2 = StringExtensions.toFirstLower(fa.getName());
        _builder.append(_firstLower_2, "\t");
        _builder.append(" = value; }");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _convertAttribute(final QuantityAttribute qa, final boolean isStatic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private ");
    {
      if (isStatic) {
        _builder.append("static");
      }
    }
    _builder.append(" int ");
    String _firstLower = StringExtensions.toFirstLower(qa.getName());
    _builder.append(_firstLower);
    _builder.append(" = ");
    int _value = qa.getInitValue().getValue();
    _builder.append(_value);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    {
      if (isStatic) {
        _builder.append("static");
      }
    }
    _builder.append(" int ");
    String _firstUpper = StringExtensions.toFirstUpper(qa.getName());
    _builder.append(_firstUpper);
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("get { return ");
    String _firstLower_1 = StringExtensions.toFirstLower(qa.getName());
    _builder.append(_firstLower_1, "    ");
    _builder.append("; }");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("set { ");
    String _firstLower_2 = StringExtensions.toFirstLower(qa.getName());
    _builder.append(_firstLower_2, "    ");
    _builder.append(" = value; }");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * CONDITIONs
   */
  protected CharSequence _convertCondition(final ExpressionCondition cond) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _convertExpression = this.convertExpression(cond.getExp());
    _builder.append(_convertExpression);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _convertCondition(final OrderCondition cond) {
    CharSequence _xblockexpression = null;
    {
      Event _event = cond.getEvent();
      final boolean isActionEvent = (_event instanceof ActionEvent);
      StringConcatenation _builder = new StringConcatenation();
      {
        Order _order = cond.getOrder();
        boolean _equals = Objects.equal(_order, Order.BEFORE);
        if (_equals) {
          _builder.append("!");
        }
      }
      _builder.append("Story.HasEventOcurred(Story.plot.");
      _builder.newLineIfNotEmpty();
      {
        if (isActionEvent) {
          Event _event_1 = cond.getEvent();
          String _firstLower = StringExtensions.toFirstLower(((ActionEvent) _event_1).getActor().getName());
          _builder.append(_firstLower);
          String _firstUpper = StringExtensions.toFirstUpper(cond.getEvent().getName());
          _builder.append(_firstUpper);
          _builder.newLineIfNotEmpty();
        } else {
          String _firstLower_1 = StringExtensions.toFirstLower(cond.getEvent().getName());
          _builder.append(_firstLower_1);
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append(")");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _convertCondition(final TriggerCondition cond) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("true");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * CHANGEs
   */
  protected CharSequence _convertChange(final ExistentChange change) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Story.space.");
    String _firstLower = StringExtensions.toFirstLower(change.getExistent().getName());
    _builder.append(_firstLower);
    _builder.append(".");
    String _firstUpper = StringExtensions.toFirstUpper(change.getAttribute().getName());
    _builder.append(_firstUpper);
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    CharSequence _convert = this.convert(change.getOp());
    _builder.append(_convert);
    _builder.append(" ");
    CharSequence _convertExpression = this.convertExpression(change.getTerm());
    _builder.append(_convertExpression);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _convertChange(final StoryDataChange change) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Story.");
    String _firstUpper = StringExtensions.toFirstUpper(change.getAttribute().getName());
    _builder.append(_firstUpper);
    _builder.append(" ");
    CharSequence _convert = this.convert(change.getOp());
    _builder.append(_convert);
    _builder.append(" ");
    CharSequence _convertExpression = this.convertExpression(change.getTerm());
    _builder.append(_convertExpression);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * EXPRESSIONs
   */
  protected String _convertExpression(final AndExpression expr) {
    String convertedString = new String();
    int i = 0;
    EList<Expression> _operands = expr.getOperands();
    for (final Expression operand : _operands) {
      {
        if (((operand instanceof OrExpression) || (operand instanceof ComparisonExpression))) {
          String _convertedString = convertedString;
          convertedString = (_convertedString + StoryGenGenerator.CSkeys.parOpen);
        }
        String _convertedString_1 = convertedString;
        CharSequence _convertExpression = this.convertExpression(operand);
        convertedString = (_convertedString_1 + _convertExpression);
        if (((operand instanceof OrExpression) || (operand instanceof ComparisonExpression))) {
          String _convertedString_2 = convertedString;
          convertedString = (_convertedString_2 + StoryGenGenerator.CSkeys.parClose);
        }
        int _size = expr.getOperands().size();
        int _minus = (_size - 1);
        boolean _lessThan = (i < _minus);
        if (_lessThan) {
          String _convertedString_3 = convertedString;
          convertedString = (_convertedString_3 + StoryGenGenerator.CSkeys.and);
        }
        i++;
      }
    }
    return convertedString;
  }
  
  protected String _convertExpression(final OrExpression expr) {
    String convertedString = new String();
    int i = 0;
    EList<Expression> _operands = expr.getOperands();
    for (final Expression operand : _operands) {
      {
        if (((operand instanceof AndExpression) || (operand instanceof ComparisonExpression))) {
          String _convertedString = convertedString;
          convertedString = (_convertedString + StoryGenGenerator.CSkeys.parOpen);
        }
        String _convertedString_1 = convertedString;
        CharSequence _convertExpression = this.convertExpression(operand);
        convertedString = (_convertedString_1 + _convertExpression);
        if (((operand instanceof AndExpression) || (operand instanceof ComparisonExpression))) {
          String _convertedString_2 = convertedString;
          convertedString = (_convertedString_2 + StoryGenGenerator.CSkeys.parClose);
        }
        int _size = expr.getOperands().size();
        int _minus = (_size - 1);
        boolean _lessThan = (i < _minus);
        if (_lessThan) {
          String _convertedString_3 = convertedString;
          convertedString = (_convertedString_3 + StoryGenGenerator.CSkeys.or);
        }
        i++;
      }
    }
    return convertedString;
  }
  
  protected String _convertExpression(final ComparisonExpression expr) {
    String convertedString = new String();
    if ((((expr.getLeft() instanceof AndExpression) || (expr.getLeft() instanceof OrExpression)) || (expr.getLeft() instanceof ComparisonExpression))) {
      String _convertedString = convertedString;
      convertedString = (_convertedString + StoryGenGenerator.CSkeys.parOpen);
    }
    String _convertedString_1 = convertedString;
    CharSequence _convertExpression = this.convertExpression(expr.getLeft());
    convertedString = (_convertedString_1 + _convertExpression);
    if ((((expr.getLeft() instanceof AndExpression) || (expr.getLeft() instanceof OrExpression)) || (expr.getLeft() instanceof ComparisonExpression))) {
      String _convertedString_2 = convertedString;
      convertedString = (_convertedString_2 + StoryGenGenerator.CSkeys.parClose);
    }
    String _convertedString_3 = convertedString;
    ComparisonOperator _operator = expr.getOperator();
    convertedString = (_convertedString_3 + _operator);
    if ((((expr.getRight() instanceof AndExpression) || (expr.getRight() instanceof OrExpression)) || (expr.getRight() instanceof ComparisonExpression))) {
      String _convertedString_4 = convertedString;
      convertedString = (_convertedString_4 + StoryGenGenerator.CSkeys.parOpen);
    }
    String _convertedString_5 = convertedString;
    CharSequence _convertExpression_1 = this.convertExpression(expr.getRight());
    convertedString = (_convertedString_5 + _convertExpression_1);
    if ((((expr.getRight() instanceof AndExpression) || (expr.getRight() instanceof OrExpression)) || (expr.getRight() instanceof ComparisonExpression))) {
      String _convertedString_6 = convertedString;
      convertedString = (_convertedString_6 + StoryGenGenerator.CSkeys.parClose);
    }
    return convertedString;
  }
  
  protected String _convertExpression(final NegationExpression expr) {
    String convertedString = new String();
    String _convertedString = convertedString;
    convertedString = (_convertedString + StoryGenGenerator.CSkeys.not);
    if ((((expr.getOperand() instanceof AndExpression) || (expr.getOperand() instanceof OrExpression)) || (expr.getOperand() instanceof ComparisonExpression))) {
      String _convertedString_1 = convertedString;
      convertedString = (_convertedString_1 + StoryGenGenerator.CSkeys.parOpen);
    }
    String _convertedString_2 = convertedString;
    CharSequence _convertExpression = this.convertExpression(expr.getOperand());
    convertedString = (_convertedString_2 + _convertExpression);
    if ((((expr.getOperand() instanceof AndExpression) || (expr.getOperand() instanceof OrExpression)) || (expr.getOperand() instanceof ComparisonExpression))) {
      String _convertedString_3 = convertedString;
      convertedString = (_convertedString_3 + StoryGenGenerator.CSkeys.parClose);
    }
    return convertedString;
  }
  
  protected CharSequence _convertExpression(final ExistentAttributeTerm term) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Story.space.");
    String _firstLower = StringExtensions.toFirstLower(term.getExistent().getName());
    _builder.append(_firstLower);
    _builder.append(".");
    String _firstUpper = StringExtensions.toFirstUpper(term.getAttribute().getName());
    _builder.append(_firstUpper);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _convertExpression(final StoryAttributeTerm term) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Story.");
    String _firstUpper = StringExtensions.toFirstUpper(term.getAttribute().getName());
    _builder.append(_firstUpper);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected String _convertExpression(final IntegerTerm term) {
    return Integer.valueOf(term.getValue()).toString();
  }
  
  protected String _convertExpression(final BooleanTerm term) {
    return term.getValue();
  }
  
  protected CharSequence _convertExpression(final Expression e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("[");
    String _string = e.toString();
    _builder.append(_string, " ");
    _builder.append("] ");
    return _builder;
  }
  
  /**
   * OPERATORS
   */
  public CharSequence convert(final AttributionOperator op) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = Objects.equal(op, AttributionOperator.ASSIGN);
      if (_equals) {
        _builder.append("=");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equals_1 = Objects.equal(op, AttributionOperator.INCREMENT);
        if (_equals_1) {
          _builder.append("+=");
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equals_2 = Objects.equal(op, AttributionOperator.DECREMENT);
          if (_equals_2) {
            _builder.append("-=");
            _builder.newLineIfNotEmpty();
          } else {
            String _literal = op.getLiteral();
            _builder.append(_literal);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence convert(final Order order) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = Objects.equal(order, Order.AFTER);
      if (_equals) {
        _builder.append(">");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equals_1 = Objects.equal(order, Order.BEFORE);
        if (_equals_1) {
          _builder.append("<");
          _builder.newLineIfNotEmpty();
        } else {
          String _literal = order.getLiteral();
          _builder.append(_literal);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence convertExistent(final Existent actor) {
    if (actor instanceof Actor) {
      return _convertExistent((Actor)actor);
    } else if (actor instanceof br.ufes.inf.pg.storyGen.Object) {
      return _convertExistent((br.ufes.inf.pg.storyGen.Object)actor);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(actor).toString());
    }
  }
  
  public CharSequence convertAttribute(final Attribute fa, final boolean isStatic) {
    if (fa instanceof FactAttribute) {
      return _convertAttribute((FactAttribute)fa, isStatic);
    } else if (fa instanceof QuantityAttribute) {
      return _convertAttribute((QuantityAttribute)fa, isStatic);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(fa, isStatic).toString());
    }
  }
  
  public CharSequence convertCondition(final Condition cond) {
    if (cond instanceof ExpressionCondition) {
      return _convertCondition((ExpressionCondition)cond);
    } else if (cond instanceof OrderCondition) {
      return _convertCondition((OrderCondition)cond);
    } else if (cond instanceof TriggerCondition) {
      return _convertCondition((TriggerCondition)cond);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cond).toString());
    }
  }
  
  public CharSequence convertChange(final Change change) {
    if (change instanceof ExistentChange) {
      return _convertChange((ExistentChange)change);
    } else if (change instanceof StoryDataChange) {
      return _convertChange((StoryDataChange)change);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(change).toString());
    }
  }
  
  public CharSequence convertExpression(final Expression term) {
    if (term instanceof BooleanTerm) {
      return _convertExpression((BooleanTerm)term);
    } else if (term instanceof ExistentAttributeTerm) {
      return _convertExpression((ExistentAttributeTerm)term);
    } else if (term instanceof IntegerTerm) {
      return _convertExpression((IntegerTerm)term);
    } else if (term instanceof StoryAttributeTerm) {
      return _convertExpression((StoryAttributeTerm)term);
    } else if (term instanceof AndExpression) {
      return _convertExpression((AndExpression)term);
    } else if (term instanceof ComparisonExpression) {
      return _convertExpression((ComparisonExpression)term);
    } else if (term instanceof NegationExpression) {
      return _convertExpression((NegationExpression)term);
    } else if (term instanceof OrExpression) {
      return _convertExpression((OrExpression)term);
    } else if (term != null) {
      return _convertExpression(term);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(term).toString());
    }
  }
}
