/*
 * generated by Xtext 2.14.0
 */
grammar InternalStoryGenerator;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.ufes.inf.mdd.trab2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufes.inf.mdd.trab2.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufes.inf.mdd.trab2.services.StoryGeneratorGrammarAccess;

}

@parser::members {

 	private StoryGeneratorGrammarAccess grammarAccess;

    public InternalStoryGeneratorParser(TokenStream input, StoryGeneratorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Story";
   	}

   	@Override
   	protected StoryGeneratorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStory
entryRuleStory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryRule()); }
	iv_ruleStory=ruleStory
	{ $current=$iv_ruleStory.current; }
	EOF;

// Rule Story
ruleStory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStoryAccess().getWorldWorldParserRuleCall_0_0());
				}
				lv_world_0_0=ruleWorld
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoryRule());
					}
					set(
						$current,
						"world",
						lv_world_0_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.World");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStoryAccess().getEventsEventParserRuleCall_1_0());
				}
				lv_events_1_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoryRule());
					}
					add(
						$current,
						"events",
						lv_events_1_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleWorld
entryRuleWorld returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorldRule()); }
	iv_ruleWorld=ruleWorld
	{ $current=$iv_ruleWorld.current; }
	EOF;

// Rule World
ruleWorld returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWorldAccess().getWorldAction_0(),
					$current);
			}
		)
		otherlv_1='World'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorldAccess().getWorldKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorldAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getWorldAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getAttrTypeAttrTypeEnumRuleCall_0_0());
				}
				lv_attrType_0_0=ruleAttrType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"attrType",
						lv_attrType_0_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.AttrType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getEventAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed($current, "abstract", true, "abstract");
				}
			)
		)?
		otherlv_1='event'
		{
			newLeafNode(otherlv_1, grammarAccess.getEventAccess().getEventKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='is'
			{
				newLeafNode(otherlv_3, grammarAccess.getEventAccess().getIsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getEventAccess().getSuperTypeEventCrossReference_3_1_0());
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getConditionsConditionParserRuleCall_5_0());
				}
				lv_conditions_6_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_6_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getEventAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='requires'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getRequiresKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getBoolExpBoolExpParserRuleCall_1_0());
				}
				lv_boolExp_1_0=ruleBoolExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"boolExp",
						lv_boolExp_1_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.BoolExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolExp
entryRuleBoolExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolExpRule()); }
	iv_ruleBoolExp=ruleBoolExp
	{ $current=$iv_ruleBoolExp.current; }
	EOF;

// Rule BoolExp
ruleBoolExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExpAccess().getLeftUnaryBoolExpParserRuleCall_0_0_0());
					}
					lv_left_0_0=ruleUnaryBoolExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExpRule());
						}
						set(
							$current,
							"left",
							lv_left_0_0,
							"br.ufes.inf.mdd.trab2.StoryGenerator.UnaryBoolExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExpAccess().getBoolOpBoolOpEnumRuleCall_0_1_0());
					}
					lv_boolOp_1_0=ruleBoolOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExpRule());
						}
						set(
							$current,
							"boolOp",
							lv_boolOp_1_0,
							"br.ufes.inf.mdd.trab2.StoryGenerator.BoolOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExpAccess().getRightBoolExpParserRuleCall_0_2_0());
					}
					lv_right_2_0=ruleBoolExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExpRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"br.ufes.inf.mdd.trab2.StoryGenerator.BoolExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getBoolExpAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExpAccess().getParBoolExpBoolExpParserRuleCall_1_1_0());
					}
					lv_parBoolExp_4_0=ruleBoolExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExpRule());
						}
						set(
							$current,
							"parBoolExp",
							lv_parBoolExp_4_0,
							"br.ufes.inf.mdd.trab2.StoryGenerator.BoolExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getBoolExpAccess().getRightParenthesisKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolExpAccess().getBinaryBoolBinaryBoolExpParserRuleCall_1_3_0());
					}
					lv_binaryBool_6_0=ruleBinaryBoolExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolExpRule());
						}
						set(
							$current,
							"binaryBool",
							lv_binaryBool_6_0,
							"br.ufes.inf.mdd.trab2.StoryGenerator.BinaryBoolExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolExpAccess().getBinaryQntyBinaryQntyExpParserRuleCall_2_0());
				}
				lv_binaryQnty_7_0=ruleBinaryQntyExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolExpRule());
					}
					set(
						$current,
						"binaryQnty",
						lv_binaryQnty_7_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.BinaryQntyExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolExpAccess().getNegateBoolExpNegateBoolExpParserRuleCall_3_0());
				}
				lv_negateBoolExp_8_0=ruleNegateBoolExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolExpRule());
					}
					set(
						$current,
						"negateBoolExp",
						lv_negateBoolExp_8_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.NegateBoolExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolExpAccess().getUnaryBoolUnaryBoolExpParserRuleCall_4_0());
				}
				lv_unaryBool_9_0=ruleUnaryBoolExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolExpRule());
					}
					set(
						$current,
						"unaryBool",
						lv_unaryBool_9_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.UnaryBoolExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryBoolExp
entryRuleBinaryBoolExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryBoolExpRule()); }
	iv_ruleBinaryBoolExp=ruleBinaryBoolExp
	{ $current=$iv_ruleBinaryBoolExp.current; }
	EOF;

// Rule BinaryBoolExp
ruleBinaryBoolExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryBoolExpAccess().getLeftUnaryBoolExpParserRuleCall_0_0());
				}
				lv_left_0_0=ruleUnaryBoolExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryBoolExpRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.UnaryBoolExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryBoolExpAccess().getBoolOpBoolOpEnumRuleCall_1_0());
				}
				lv_boolOp_1_0=ruleBoolOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryBoolExpRule());
					}
					set(
						$current,
						"boolOp",
						lv_boolOp_1_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.BoolOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryBoolExpAccess().getRightUnaryBoolExpParserRuleCall_2_0());
				}
				lv_right_2_0=ruleUnaryBoolExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryBoolExpRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.UnaryBoolExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryQntyExp
entryRuleBinaryQntyExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryQntyExpRule()); }
	iv_ruleBinaryQntyExp=ruleBinaryQntyExp
	{ $current=$iv_ruleBinaryQntyExp.current; }
	EOF;

// Rule BinaryQntyExp
ruleBinaryQntyExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryQntyExpAccess().getLeftUnaryQuantityExpParserRuleCall_0_0());
				}
				lv_left_0_0=ruleUnaryQuantityExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryQntyExpRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.UnaryQuantityExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryQntyExpAccess().getNumOpNumOpEnumRuleCall_1_0());
				}
				lv_numOp_1_0=ruleNumOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryQntyExpRule());
					}
					set(
						$current,
						"numOp",
						lv_numOp_1_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.NumOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryQntyExpAccess().getRightUnaryQuantityExpParserRuleCall_2_0());
				}
				lv_right_2_0=ruleUnaryQuantityExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryQntyExpRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.UnaryQuantityExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryBoolExp
entryRuleUnaryBoolExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryBoolExpRule()); }
	iv_ruleUnaryBoolExp=ruleUnaryBoolExp
	{ $current=$iv_ruleUnaryBoolExp.current; }
	EOF;

// Rule UnaryBoolExp
ruleUnaryBoolExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryBoolExpRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getUnaryBoolExpAccess().getIdAttributeCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryBoolExpAccess().getValueBooleanValueEnumRuleCall_1_0());
				}
				lv_value_1_0=ruleBooleanValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryBoolExpRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.BooleanValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNegateBoolExp
entryRuleNegateBoolExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegateBoolExpRule()); }
	iv_ruleNegateBoolExp=ruleNegateBoolExp
	{ $current=$iv_ruleNegateBoolExp.current; }
	EOF;

// Rule NegateBoolExp
ruleNegateBoolExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNegateBoolExpAccess().getNotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegateBoolExpAccess().getBoolExpBoolExpParserRuleCall_1_0());
				}
				lv_boolExp_1_0=ruleBoolExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegateBoolExpRule());
					}
					set(
						$current,
						"boolExp",
						lv_boolExp_1_0,
						"br.ufes.inf.mdd.trab2.StoryGenerator.BoolExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryQuantityExp
entryRuleUnaryQuantityExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryQuantityExpRule()); }
	iv_ruleUnaryQuantityExp=ruleUnaryQuantityExp
	{ $current=$iv_ruleUnaryQuantityExp.current; }
	EOF;

// Rule UnaryQuantityExp
ruleUnaryQuantityExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryQuantityExpRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getUnaryQuantityExpAccess().getIdAttributeCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getUnaryQuantityExpAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryQuantityExpRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Rule AttrType
ruleAttrType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='fact'
			{
				$current = grammarAccess.getAttrTypeAccess().getFACTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAttrTypeAccess().getFACTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='quantity'
			{
				$current = grammarAccess.getAttrTypeAccess().getQUANTITYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAttrTypeAccess().getQUANTITYEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BooleanValue
ruleBooleanValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule NumOp
ruleNumOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getNumOpAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNumOpAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getNumOpAccess().getNEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNumOpAccess().getNEQEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getNumOpAccess().getGTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNumOpAccess().getGTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<'
			{
				$current = grammarAccess.getNumOpAccess().getLTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNumOpAccess().getLTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getNumOpAccess().getGEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNumOpAccess().getGEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<='
			{
				$current = grammarAccess.getNumOpAccess().getLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getNumOpAccess().getLEEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule BoolOp
ruleBoolOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getBoolOpAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBoolOpAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getBoolOpAccess().getNEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBoolOpAccess().getNEQEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='and'
			{
				$current = grammarAccess.getBoolOpAccess().getANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBoolOpAccess().getANDEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='or'
			{
				$current = grammarAccess.getBoolOpAccess().getOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBoolOpAccess().getOREnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
