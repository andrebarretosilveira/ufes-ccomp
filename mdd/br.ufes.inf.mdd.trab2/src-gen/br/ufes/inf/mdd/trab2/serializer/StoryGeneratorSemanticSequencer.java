/*
 * generated by Xtext 2.14.0
 */
package br.ufes.inf.mdd.trab2.serializer;

import br.ufes.inf.mdd.trab2.services.StoryGeneratorGrammarAccess;
import br.ufes.inf.mdd.trab2.storyGenerator.Attribute;
import br.ufes.inf.mdd.trab2.storyGenerator.BinaryBoolExp;
import br.ufes.inf.mdd.trab2.storyGenerator.BinaryQntyExp;
import br.ufes.inf.mdd.trab2.storyGenerator.BoolExp;
import br.ufes.inf.mdd.trab2.storyGenerator.Condition;
import br.ufes.inf.mdd.trab2.storyGenerator.Event;
import br.ufes.inf.mdd.trab2.storyGenerator.NegateBoolExp;
import br.ufes.inf.mdd.trab2.storyGenerator.Story;
import br.ufes.inf.mdd.trab2.storyGenerator.StoryGeneratorPackage;
import br.ufes.inf.mdd.trab2.storyGenerator.UnaryBoolExp;
import br.ufes.inf.mdd.trab2.storyGenerator.UnaryQuantityExp;
import br.ufes.inf.mdd.trab2.storyGenerator.World;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class StoryGeneratorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StoryGeneratorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StoryGeneratorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StoryGeneratorPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case StoryGeneratorPackage.BINARY_BOOL_EXP:
				sequence_BinaryBoolExp(context, (BinaryBoolExp) semanticObject); 
				return; 
			case StoryGeneratorPackage.BINARY_QNTY_EXP:
				sequence_BinaryQntyExp(context, (BinaryQntyExp) semanticObject); 
				return; 
			case StoryGeneratorPackage.BOOL_EXP:
				sequence_BoolExp(context, (BoolExp) semanticObject); 
				return; 
			case StoryGeneratorPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case StoryGeneratorPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case StoryGeneratorPackage.NEGATE_BOOL_EXP:
				sequence_NegateBoolExp(context, (NegateBoolExp) semanticObject); 
				return; 
			case StoryGeneratorPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case StoryGeneratorPackage.UNARY_BOOL_EXP:
				sequence_UnaryBoolExp(context, (UnaryBoolExp) semanticObject); 
				return; 
			case StoryGeneratorPackage.UNARY_QUANTITY_EXP:
				sequence_UnaryQuantityExp(context, (UnaryQuantityExp) semanticObject); 
				return; 
			case StoryGeneratorPackage.WORLD:
				sequence_World(context, (World) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (attrType=AttrType name=ID)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.ATTRIBUTE__ATTR_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.ATTRIBUTE__ATTR_TYPE));
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getAttrTypeAttrTypeEnumRuleCall_0_0(), semanticObject.getAttrType());
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BinaryBoolExp returns BinaryBoolExp
	 *
	 * Constraint:
	 *     (left=UnaryBoolExp boolOp=BoolOp right=UnaryBoolExp)
	 */
	protected void sequence_BinaryBoolExp(ISerializationContext context, BinaryBoolExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.BINARY_BOOL_EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.BINARY_BOOL_EXP__LEFT));
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.BINARY_BOOL_EXP__BOOL_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.BINARY_BOOL_EXP__BOOL_OP));
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.BINARY_BOOL_EXP__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.BINARY_BOOL_EXP__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryBoolExpAccess().getLeftUnaryBoolExpParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBinaryBoolExpAccess().getBoolOpBoolOpEnumRuleCall_1_0(), semanticObject.getBoolOp());
		feeder.accept(grammarAccess.getBinaryBoolExpAccess().getRightUnaryBoolExpParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BinaryQntyExp returns BinaryQntyExp
	 *
	 * Constraint:
	 *     (left=UnaryQuantityExp numOp=NumOp right=UnaryQuantityExp)
	 */
	protected void sequence_BinaryQntyExp(ISerializationContext context, BinaryQntyExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.BINARY_QNTY_EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.BINARY_QNTY_EXP__LEFT));
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.BINARY_QNTY_EXP__NUM_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.BINARY_QNTY_EXP__NUM_OP));
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.BINARY_QNTY_EXP__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.BINARY_QNTY_EXP__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryQntyExpAccess().getLeftUnaryQuantityExpParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBinaryQntyExpAccess().getNumOpNumOpEnumRuleCall_1_0(), semanticObject.getNumOp());
		feeder.accept(grammarAccess.getBinaryQntyExpAccess().getRightUnaryQuantityExpParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoolExp returns BoolExp
	 *
	 * Constraint:
	 *     (
	 *         (left=UnaryBoolExp boolOp=BoolOp right=BoolExp) | 
	 *         (parBoolExp=BoolExp binaryBool=BinaryBoolExp) | 
	 *         binaryQnty=BinaryQntyExp | 
	 *         negateBoolExp=NegateBoolExp | 
	 *         unaryBool=UnaryBoolExp
	 *     )
	 */
	protected void sequence_BoolExp(ISerializationContext context, BoolExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     boolExp=BoolExp
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.CONDITION__BOOL_EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.CONDITION__BOOL_EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getBoolExpBoolExpParserRuleCall_1_0(), semanticObject.getBoolExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (abstract?='abstract'? name=ID superType=[Event|ID]? conditions+=Condition*)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NegateBoolExp returns NegateBoolExp
	 *
	 * Constraint:
	 *     boolExp=BoolExp
	 */
	protected void sequence_NegateBoolExp(ISerializationContext context, NegateBoolExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryGeneratorPackage.Literals.NEGATE_BOOL_EXP__BOOL_EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryGeneratorPackage.Literals.NEGATE_BOOL_EXP__BOOL_EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNegateBoolExpAccess().getBoolExpBoolExpParserRuleCall_1_0(), semanticObject.getBoolExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (world=World events+=Event*)
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnaryBoolExp returns UnaryBoolExp
	 *
	 * Constraint:
	 *     (id=[Attribute|ID] | value=BooleanValue)
	 */
	protected void sequence_UnaryBoolExp(ISerializationContext context, UnaryBoolExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnaryQuantityExp returns UnaryQuantityExp
	 *
	 * Constraint:
	 *     (id=[Attribute|ID] | value=INT)
	 */
	protected void sequence_UnaryQuantityExp(ISerializationContext context, UnaryQuantityExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     World returns World
	 *
	 * Constraint:
	 *     attributes+=Attribute*
	 */
	protected void sequence_World(ISerializationContext context, World semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
