/*
 * generated by Xtext 2.14.0
 */
package br.ufes.inf.mdd.trab2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StoryGeneratorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWorldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWorldWorldParserRuleCall_0_0 = (RuleCall)cWorldAssignment_0.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		
		//Story:
		//	world=World
		//	events+=Event*;
		@Override public ParserRule getRule() { return rule; }
		
		//world=World events+=Event*
		public Group getGroup() { return cGroup; }
		
		//world=World
		public Assignment getWorldAssignment_0() { return cWorldAssignment_0; }
		
		//World
		public RuleCall getWorldWorldParserRuleCall_0_0() { return cWorldWorldParserRuleCall_0_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_1_0() { return cEventsEventParserRuleCall_1_0; }
	}
	public class WorldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.World");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWorldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//World:
		//	{World} 'World' '{' attributes+=Attribute* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{World} 'World' '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//{World}
		public Action getWorldAction_0() { return cWorldAction_0; }
		
		//'World'
		public Keyword getWorldKeyword_1() { return cWorldKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrTypeAttrTypeEnumRuleCall_0_0 = (RuleCall)cAttrTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attribute:
		//	attrType=AttrType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//attrType=AttrType name=ID
		public Group getGroup() { return cGroup; }
		
		//attrType=AttrType
		public Assignment getAttrTypeAssignment_0() { return cAttrTypeAssignment_0; }
		
		//AttrType
		public RuleCall getAttrTypeAttrTypeEnumRuleCall_0_0() { return cAttrTypeAttrTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypeEventCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeEventIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperTypeEventCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionsConditionParserRuleCall_5_0 = (RuleCall)cConditionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Event:
		//	abstract?='abstract'? 'event' name=ID ('is' superType=[Event])? '{' conditions+=Condition* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? 'event' name=ID ('is' superType=[Event])? '{' conditions+=Condition* '}'
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('is' superType=[Event])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'is'
		public Keyword getIsKeyword_3_0() { return cIsKeyword_3_0; }
		
		//superType=[Event]
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//[Event]
		public CrossReference getSuperTypeEventCrossReference_3_1_0() { return cSuperTypeEventCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSuperTypeEventIDTerminalRuleCall_3_1_0_1() { return cSuperTypeEventIDTerminalRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment_5() { return cConditionsAssignment_5; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_5_0() { return cConditionsConditionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolExpBoolExpParserRuleCall_1_0 = (RuleCall)cBoolExpAssignment_1.eContents().get(0);
		
		//Condition:
		//	'requires' boolExp=BoolExp;
		@Override public ParserRule getRule() { return rule; }
		
		//'requires' boolExp=BoolExp
		public Group getGroup() { return cGroup; }
		
		//'requires'
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }
		
		//boolExp=BoolExp
		public Assignment getBoolExpAssignment_1() { return cBoolExpAssignment_1; }
		
		//BoolExp
		public RuleCall getBoolExpBoolExpParserRuleCall_1_0() { return cBoolExpBoolExpParserRuleCall_1_0; }
	}
	public class BoolExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.BoolExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftUnaryBoolExpParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final Assignment cBoolOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBoolOpBoolOpEnumRuleCall_0_1_0 = (RuleCall)cBoolOpAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightBoolExpParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParBoolExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParBoolExpBoolExpParserRuleCall_1_1_0 = (RuleCall)cParBoolExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cBinaryBoolAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBinaryBoolBinaryBoolExpParserRuleCall_1_3_0 = (RuleCall)cBinaryBoolAssignment_1_3.eContents().get(0);
		private final Assignment cBinaryQntyAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBinaryQntyBinaryQntyExpParserRuleCall_2_0 = (RuleCall)cBinaryQntyAssignment_2.eContents().get(0);
		private final Assignment cNegateBoolExpAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNegateBoolExpNegateBoolExpParserRuleCall_3_0 = (RuleCall)cNegateBoolExpAssignment_3.eContents().get(0);
		private final Assignment cUnaryBoolAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cUnaryBoolUnaryBoolExpParserRuleCall_4_0 = (RuleCall)cUnaryBoolAssignment_4.eContents().get(0);
		
		//BoolExp:
		//	left=UnaryBoolExp boolOp=BoolOp right=BoolExp |
		//	'(' parBoolExp=BoolExp ')'
		//	binaryBool=BinaryBoolExp | binaryQnty=BinaryQntyExp | negateBoolExp=NegateBoolExp | unaryBool=UnaryBoolExp;
		@Override public ParserRule getRule() { return rule; }
		
		//left=UnaryBoolExp boolOp=BoolOp right=BoolExp | '(' parBoolExp=BoolExp ')' binaryBool=BinaryBoolExp |
		//binaryQnty=BinaryQntyExp | negateBoolExp=NegateBoolExp | unaryBool=UnaryBoolExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left=UnaryBoolExp boolOp=BoolOp right=BoolExp
		public Group getGroup_0() { return cGroup_0; }
		
		//left=UnaryBoolExp
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }
		
		//UnaryBoolExp
		public RuleCall getLeftUnaryBoolExpParserRuleCall_0_0_0() { return cLeftUnaryBoolExpParserRuleCall_0_0_0; }
		
		//boolOp=BoolOp
		public Assignment getBoolOpAssignment_0_1() { return cBoolOpAssignment_0_1; }
		
		//BoolOp
		public RuleCall getBoolOpBoolOpEnumRuleCall_0_1_0() { return cBoolOpBoolOpEnumRuleCall_0_1_0; }
		
		//right=BoolExp
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }
		
		//BoolExp
		public RuleCall getRightBoolExpParserRuleCall_0_2_0() { return cRightBoolExpParserRuleCall_0_2_0; }
		
		//'(' parBoolExp=BoolExp ')' binaryBool=BinaryBoolExp
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parBoolExp=BoolExp
		public Assignment getParBoolExpAssignment_1_1() { return cParBoolExpAssignment_1_1; }
		
		//BoolExp
		public RuleCall getParBoolExpBoolExpParserRuleCall_1_1_0() { return cParBoolExpBoolExpParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//binaryBool=BinaryBoolExp
		public Assignment getBinaryBoolAssignment_1_3() { return cBinaryBoolAssignment_1_3; }
		
		//BinaryBoolExp
		public RuleCall getBinaryBoolBinaryBoolExpParserRuleCall_1_3_0() { return cBinaryBoolBinaryBoolExpParserRuleCall_1_3_0; }
		
		//binaryQnty=BinaryQntyExp
		public Assignment getBinaryQntyAssignment_2() { return cBinaryQntyAssignment_2; }
		
		//BinaryQntyExp
		public RuleCall getBinaryQntyBinaryQntyExpParserRuleCall_2_0() { return cBinaryQntyBinaryQntyExpParserRuleCall_2_0; }
		
		//negateBoolExp=NegateBoolExp
		public Assignment getNegateBoolExpAssignment_3() { return cNegateBoolExpAssignment_3; }
		
		//NegateBoolExp
		public RuleCall getNegateBoolExpNegateBoolExpParserRuleCall_3_0() { return cNegateBoolExpNegateBoolExpParserRuleCall_3_0; }
		
		//unaryBool=UnaryBoolExp
		public Assignment getUnaryBoolAssignment_4() { return cUnaryBoolAssignment_4; }
		
		//UnaryBoolExp
		public RuleCall getUnaryBoolUnaryBoolExpParserRuleCall_4_0() { return cUnaryBoolUnaryBoolExpParserRuleCall_4_0; }
	}
	public class BinaryBoolExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.BinaryBoolExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnaryBoolExpParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cBoolOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolOpBoolOpEnumRuleCall_1_0 = (RuleCall)cBoolOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightUnaryBoolExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//BinaryBoolExp:
		//	left=UnaryBoolExp boolOp=BoolOp right=UnaryBoolExp;
		@Override public ParserRule getRule() { return rule; }
		
		//left=UnaryBoolExp boolOp=BoolOp right=UnaryBoolExp
		public Group getGroup() { return cGroup; }
		
		//left=UnaryBoolExp
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//UnaryBoolExp
		public RuleCall getLeftUnaryBoolExpParserRuleCall_0_0() { return cLeftUnaryBoolExpParserRuleCall_0_0; }
		
		//boolOp=BoolOp
		public Assignment getBoolOpAssignment_1() { return cBoolOpAssignment_1; }
		
		//BoolOp
		public RuleCall getBoolOpBoolOpEnumRuleCall_1_0() { return cBoolOpBoolOpEnumRuleCall_1_0; }
		
		//right=UnaryBoolExp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//UnaryBoolExp
		public RuleCall getRightUnaryBoolExpParserRuleCall_2_0() { return cRightUnaryBoolExpParserRuleCall_2_0; }
	}
	public class BinaryQntyExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.BinaryQntyExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnaryQuantityExpParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cNumOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumOpNumOpEnumRuleCall_1_0 = (RuleCall)cNumOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightUnaryQuantityExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//BinaryQntyExp:
		//	left=UnaryQuantityExp numOp=NumOp right=UnaryQuantityExp;
		@Override public ParserRule getRule() { return rule; }
		
		//left=UnaryQuantityExp numOp=NumOp right=UnaryQuantityExp
		public Group getGroup() { return cGroup; }
		
		//left=UnaryQuantityExp
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//UnaryQuantityExp
		public RuleCall getLeftUnaryQuantityExpParserRuleCall_0_0() { return cLeftUnaryQuantityExpParserRuleCall_0_0; }
		
		//numOp=NumOp
		public Assignment getNumOpAssignment_1() { return cNumOpAssignment_1; }
		
		//NumOp
		public RuleCall getNumOpNumOpEnumRuleCall_1_0() { return cNumOpNumOpEnumRuleCall_1_0; }
		
		//right=UnaryQuantityExp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//UnaryQuantityExp
		public RuleCall getRightUnaryQuantityExpParserRuleCall_2_0() { return cRightUnaryQuantityExpParserRuleCall_2_0; }
	}
	public class UnaryBoolExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.UnaryBoolExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cIdAttributeCrossReference_0_0 = (CrossReference)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cIdAttributeCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueBooleanValueEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UnaryBoolExp:
		//	id=[Attribute] | value=BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//id=[Attribute] | value=BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=[Attribute]
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//[Attribute]
		public CrossReference getIdAttributeCrossReference_0_0() { return cIdAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getIdAttributeIDTerminalRuleCall_0_0_1() { return cIdAttributeIDTerminalRuleCall_0_0_1; }
		
		//value=BooleanValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//BooleanValue
		public RuleCall getValueBooleanValueEnumRuleCall_1_0() { return cValueBooleanValueEnumRuleCall_1_0; }
	}
	public class NegateBoolExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.NegateBoolExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolExpBoolExpParserRuleCall_1_0 = (RuleCall)cBoolExpAssignment_1.eContents().get(0);
		
		//NegateBoolExp:
		//	'not' boolExp=BoolExp;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' boolExp=BoolExp
		public Group getGroup() { return cGroup; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//boolExp=BoolExp
		public Assignment getBoolExpAssignment_1() { return cBoolExpAssignment_1; }
		
		//BoolExp
		public RuleCall getBoolExpBoolExpParserRuleCall_1_0() { return cBoolExpBoolExpParserRuleCall_1_0; }
	}
	public class UnaryQuantityExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.UnaryQuantityExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cIdAttributeCrossReference_0_0 = (CrossReference)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cIdAttributeCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UnaryQuantityExp:
		//	id=[Attribute] | value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//id=[Attribute] | value=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=[Attribute]
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//[Attribute]
		public CrossReference getIdAttributeCrossReference_0_0() { return cIdAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getIdAttributeIDTerminalRuleCall_0_0_1() { return cIdAttributeIDTerminalRuleCall_0_0_1; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	public class AttrTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.AttrType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFACTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFACTFactKeyword_0_0 = (Keyword)cFACTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cQUANTITYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cQUANTITYQuantityKeyword_1_0 = (Keyword)cQUANTITYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AttrType:
		//	FACT='fact' |
		//	QUANTITY='quantity';
		public EnumRule getRule() { return rule; }
		
		//FACT='fact' | QUANTITY='quantity'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FACT='fact'
		public EnumLiteralDeclaration getFACTEnumLiteralDeclaration_0() { return cFACTEnumLiteralDeclaration_0; }
		
		//'fact'
		public Keyword getFACTFactKeyword_0_0() { return cFACTFactKeyword_0_0; }
		
		//QUANTITY='quantity'
		public EnumLiteralDeclaration getQUANTITYEnumLiteralDeclaration_1() { return cQUANTITYEnumLiteralDeclaration_1; }
		
		//'quantity'
		public Keyword getQUANTITYQuantityKeyword_1_0() { return cQUANTITYQuantityKeyword_1_0; }
	}
	public class BooleanValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanValue:
		//	TRUE='true' |
		//	FALSE='false';
		public EnumRule getRule() { return rule; }
		
		//TRUE='true' | FALSE='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE='true'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'true'
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	public class NumOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.NumOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGTGreaterThanSignKeyword_2_0 = (Keyword)cGTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLTLessThanSignKeyword_3_0 = (Keyword)cLTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLELessThanSignEqualsSignKeyword_5_0 = (Keyword)cLEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum NumOp:
		//	EQ='==' |
		//	NEQ='!=' |
		//	GT='>' |
		//	LT='<' |
		//	GE='>=' |
		//	LE='<=';
		public EnumRule getRule() { return rule; }
		
		//EQ='==' | NEQ='!=' | GT='>' | LT='<' | GE='>=' | LE='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ='=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NEQ='!='
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_1() { return cNEQEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNEQExclamationMarkEqualsSignKeyword_1_0() { return cNEQExclamationMarkEqualsSignKeyword_1_0; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_2() { return cGTEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_2_0() { return cGTGreaterThanSignKeyword_2_0; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_3() { return cLTEnumLiteralDeclaration_3; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_3_0() { return cLTLessThanSignKeyword_3_0; }
		
		//GE='>='
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_4() { return cGEEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getGEGreaterThanSignEqualsSignKeyword_4_0() { return cGEGreaterThanSignEqualsSignKeyword_4_0; }
		
		//LE='<='
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_5() { return cLEEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getLELessThanSignEqualsSignKeyword_5_0() { return cLELessThanSignEqualsSignKeyword_5_0; }
	}
	public class BoolOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufes.inf.mdd.trab2.StoryGenerator.BoolOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANDAndKeyword_2_0 = (Keyword)cANDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOROrKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BoolOp:
		//	EQ='==' |
		//	NEQ='!=' |
		//	AND='and' |
		//	OR='or';
		public EnumRule getRule() { return rule; }
		
		//EQ='==' | NEQ='!=' | AND='and' | OR='or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ='=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NEQ='!='
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_1() { return cNEQEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNEQExclamationMarkEqualsSignKeyword_1_0() { return cNEQExclamationMarkEqualsSignKeyword_1_0; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_2() { return cANDEnumLiteralDeclaration_2; }
		
		//'and'
		public Keyword getANDAndKeyword_2_0() { return cANDAndKeyword_2_0; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }
		
		//'or'
		public Keyword getOROrKeyword_3_0() { return cOROrKeyword_3_0; }
	}
	
	private final StoryElements pStory;
	private final WorldElements pWorld;
	private final AttributeElements pAttribute;
	private final EventElements pEvent;
	private final ConditionElements pCondition;
	private final BoolExpElements pBoolExp;
	private final BinaryBoolExpElements pBinaryBoolExp;
	private final BinaryQntyExpElements pBinaryQntyExp;
	private final UnaryBoolExpElements pUnaryBoolExp;
	private final NegateBoolExpElements pNegateBoolExp;
	private final UnaryQuantityExpElements pUnaryQuantityExp;
	private final AttrTypeElements eAttrType;
	private final BooleanValueElements eBooleanValue;
	private final NumOpElements eNumOp;
	private final BoolOpElements eBoolOp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StoryGeneratorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStory = new StoryElements();
		this.pWorld = new WorldElements();
		this.pAttribute = new AttributeElements();
		this.pEvent = new EventElements();
		this.pCondition = new ConditionElements();
		this.pBoolExp = new BoolExpElements();
		this.pBinaryBoolExp = new BinaryBoolExpElements();
		this.pBinaryQntyExp = new BinaryQntyExpElements();
		this.pUnaryBoolExp = new UnaryBoolExpElements();
		this.pNegateBoolExp = new NegateBoolExpElements();
		this.pUnaryQuantityExp = new UnaryQuantityExpElements();
		this.eAttrType = new AttrTypeElements();
		this.eBooleanValue = new BooleanValueElements();
		this.eNumOp = new NumOpElements();
		this.eBoolOp = new BoolOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufes.inf.mdd.trab2.StoryGenerator".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Story:
	//	world=World
	//	events+=Event*;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	//World:
	//	{World} 'World' '{' attributes+=Attribute* '}';
	public WorldElements getWorldAccess() {
		return pWorld;
	}
	
	public ParserRule getWorldRule() {
		return getWorldAccess().getRule();
	}
	
	//Attribute:
	//	attrType=AttrType name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Event:
	//	abstract?='abstract'? 'event' name=ID ('is' superType=[Event])? '{' conditions+=Condition* '}';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Condition:
	//	'requires' boolExp=BoolExp;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//BoolExp:
	//	left=UnaryBoolExp boolOp=BoolOp right=BoolExp |
	//	'(' parBoolExp=BoolExp ')'
	//	binaryBool=BinaryBoolExp | binaryQnty=BinaryQntyExp | negateBoolExp=NegateBoolExp | unaryBool=UnaryBoolExp;
	public BoolExpElements getBoolExpAccess() {
		return pBoolExp;
	}
	
	public ParserRule getBoolExpRule() {
		return getBoolExpAccess().getRule();
	}
	
	//BinaryBoolExp:
	//	left=UnaryBoolExp boolOp=BoolOp right=UnaryBoolExp;
	public BinaryBoolExpElements getBinaryBoolExpAccess() {
		return pBinaryBoolExp;
	}
	
	public ParserRule getBinaryBoolExpRule() {
		return getBinaryBoolExpAccess().getRule();
	}
	
	//BinaryQntyExp:
	//	left=UnaryQuantityExp numOp=NumOp right=UnaryQuantityExp;
	public BinaryQntyExpElements getBinaryQntyExpAccess() {
		return pBinaryQntyExp;
	}
	
	public ParserRule getBinaryQntyExpRule() {
		return getBinaryQntyExpAccess().getRule();
	}
	
	//UnaryBoolExp:
	//	id=[Attribute] | value=BooleanValue;
	public UnaryBoolExpElements getUnaryBoolExpAccess() {
		return pUnaryBoolExp;
	}
	
	public ParserRule getUnaryBoolExpRule() {
		return getUnaryBoolExpAccess().getRule();
	}
	
	//NegateBoolExp:
	//	'not' boolExp=BoolExp;
	public NegateBoolExpElements getNegateBoolExpAccess() {
		return pNegateBoolExp;
	}
	
	public ParserRule getNegateBoolExpRule() {
		return getNegateBoolExpAccess().getRule();
	}
	
	//UnaryQuantityExp:
	//	id=[Attribute] | value=INT;
	public UnaryQuantityExpElements getUnaryQuantityExpAccess() {
		return pUnaryQuantityExp;
	}
	
	public ParserRule getUnaryQuantityExpRule() {
		return getUnaryQuantityExpAccess().getRule();
	}
	
	//enum AttrType:
	//	FACT='fact' |
	//	QUANTITY='quantity';
	public AttrTypeElements getAttrTypeAccess() {
		return eAttrType;
	}
	
	public EnumRule getAttrTypeRule() {
		return getAttrTypeAccess().getRule();
	}
	
	//enum BooleanValue:
	//	TRUE='true' |
	//	FALSE='false';
	public BooleanValueElements getBooleanValueAccess() {
		return eBooleanValue;
	}
	
	public EnumRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//enum NumOp:
	//	EQ='==' |
	//	NEQ='!=' |
	//	GT='>' |
	//	LT='<' |
	//	GE='>=' |
	//	LE='<=';
	public NumOpElements getNumOpAccess() {
		return eNumOp;
	}
	
	public EnumRule getNumOpRule() {
		return getNumOpAccess().getRule();
	}
	
	//enum BoolOp:
	//	EQ='==' |
	//	NEQ='!=' |
	//	AND='and' |
	//	OR='or';
	public BoolOpElements getBoolOpAccess() {
		return eBoolOp;
	}
	
	public EnumRule getBoolOpRule() {
		return getBoolOpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
