/*
 * generated by Xtext 2.14.0
 */
package br.ufes.inf.mdd.trab2.validation

import br.ufes.inf.mdd.trab2.storyGenerator.AttrType
import br.ufes.inf.mdd.trab2.storyGenerator.Attribute
import br.ufes.inf.mdd.trab2.storyGenerator.Event
import br.ufes.inf.mdd.trab2.storyGenerator.Story
import br.ufes.inf.mdd.trab2.storyGenerator.StoryGeneratorPackage
import br.ufes.inf.mdd.trab2.storyGenerator.UnaryBoolExp
import br.ufes.inf.mdd.trab2.storyGenerator.UnaryQuantityExp
import br.ufes.inf.mdd.trab2.storyGenerator.World
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class StoryGeneratorValidator extends AbstractStoryGeneratorValidator {
	
	@Check
	def checkAbstractEventHeritage(Event event) {
		if (event.isAbstract && event.superType !== null && !event.superType.isAbstract) {
			error('Abstract event cannot specialize a concrete event.',
				StoryGeneratorPackage.Literals.EVENT__ABSTRACT
			);
		}
	}
	
	@Check
	def checkInheritanceCycle(Event event) {
		var parentEvent = event.superType
		
		
		while(parentEvent !== null)
		{
			if(event.name == parentEvent.name)
			{
				error('An event cannot specialize itself.',
				StoryGeneratorPackage.Literals.EVENT__SUPER_TYPE
				)
				parentEvent = null	
			}
			else
			{
				parentEvent = parentEvent.superType
			}
		}
		
	}

	@Check
	def void checkEventNameIsUnique(Event event) {	
		var story = event.eContainer as Story;
		
		for (other : story.events) {
			if (other != event && event.name.equals(other.name)) {
				error("Event names have to be unique.",
					StoryGeneratorPackage.Literals.EVENT__NAME
				);
				return;
			}
		}
	}
	
	@Check
	def void checkAttributeNameIsUnique(Attribute attr) {	
		var world = attr.eContainer as World;
		
		for (other : world.attributes) {
			if (other != attr && attr.name.equals(other.name)) {
				error("Attribute names have to be unique.",
					StoryGeneratorPackage.Literals.ATTRIBUTE__NAME
				);
				return;
			}
		}
	}
	
	@Check
	def void checkBoolExpAttribute(UnaryBoolExp boolExp) 
	{
		if(boolExp.id !== null && boolExp.id.attrType != AttrType.FACT)
		{
			error("Boolean expressions can only have attributes of type fact",
			StoryGeneratorPackage.Literals.UNARY_BOOL_EXP__ID
			);
		}
		
	}
	
	@Check
	def void checkQntyExpAttribute(UnaryQuantityExp qntyExp) 
	{
		if(qntyExp.id !== null && qntyExp.id.attrType != AttrType.QUANTITY)
		{
			error("Quantity expressions can only have attributes of type quantity",
			StoryGeneratorPackage.Literals.UNARY_QUANTITY_EXP__ID
			);
		}
		
	}


}
